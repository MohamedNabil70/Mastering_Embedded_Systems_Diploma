
Unit6_Lesson4_Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_2>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/io.h>

ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	//Turn ON LED0
	PORTD |= (1<<5);
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	89 e6       	ldi	r24, 0x69	; 105
  86:	98 e1       	ldi	r25, 0x18	; 24
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <__vector_1+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_1+0x26>
  92:	00 00       	nop
	
	//1 Second delay
	_delay_ms(1000);
}
  94:	9f 91       	pop	r25
  96:	8f 91       	pop	r24
  98:	2f 91       	pop	r18
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_2>:

ISR(INT1_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	//Turn ON LED1
	PORTD |= (1<<6);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__vector_2+0x1c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <__vector_2+0x26>
  ca:	00 00       	nop
	
	//1 Second delay
	_delay_ms(1000);	
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <__vector_3>:

ISR(INT2_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	//Turn ON LED0
	PORTD |= (1<<7);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	98 e1       	ldi	r25, 0x18	; 24
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <__vector_3+0x1c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__vector_3+0x26>
 102:	00 00       	nop
	
	//1 Second delay
	_delay_ms(1000);	
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <INT_init>:

void INT_init(void){
	
	// enable SREG [global interrupt enable]
	sei(); 
 114:	78 94       	sei
	
	//External Interrupt request enable [INT0,INT1,INT2]
	GICR |= (0b111 << 5); 
 116:	8b b7       	in	r24, 0x3b	; 59
 118:	80 6e       	ori	r24, 0xE0	; 224
 11a:	8b bf       	out	0x3b, r24	; 59
	
	//INT0 Trigger setting (Any Logical Change)
	MCUCR |= 1 << 0;
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 bf       	out	0x35, r24	; 53
	//INT1 Trigger setting (Rising Edge)
	MCUCR |= (0b11 << 2);
 122:	85 b7       	in	r24, 0x35	; 53
 124:	8c 60       	ori	r24, 0x0C	; 12
 126:	85 bf       	out	0x35, r24	; 53
	//INT2 Trigger setting (Falling Edge)
	MCUCSR &= ~(1 << 6);	
 128:	84 b7       	in	r24, 0x34	; 52
 12a:	8f 7b       	andi	r24, 0xBF	; 191
 12c:	84 bf       	out	0x34, r24	; 52
 12e:	08 95       	ret

00000130 <DIO_init>:
}

void DIO_init(void){
	
	//Port B Pin 2 INPUT
	DDRB &= ~(1<<2);	
 130:	87 b3       	in	r24, 0x17	; 23
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	87 bb       	out	0x17, r24	; 23
	//Port D Pins 2,3 INPUT
	DDRD &= ~(0b11<<2);	
 136:	81 b3       	in	r24, 0x11	; 17
 138:	83 7f       	andi	r24, 0xF3	; 243
 13a:	81 bb       	out	0x11, r24	; 17
	//Port D Pins 5,6,7 OUTPUT
	DDRD |= (0b111<<5);
 13c:	81 b3       	in	r24, 0x11	; 17
 13e:	80 6e       	ori	r24, 0xE0	; 224
 140:	81 bb       	out	0x11, r24	; 17
 142:	08 95       	ret

00000144 <main>:


int main(void)
{
    
	INT_init();
 144:	0e 94 8a 00 	call	0x114	; 0x114 <INT_init>
	DIO_init();
 148:	0e 94 98 00 	call	0x130	; 0x130 <DIO_init>
	
    while (1) 
    {
		//Turn OFF LEDs
		PORTD &= ~(0b111<<5);
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	8f 71       	andi	r24, 0x1F	; 31
 150:	82 bb       	out	0x12, r24	; 18
 152:	fc cf       	rjmp	.-8      	; 0x14c <main+0x8>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
