
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000afc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c2c  08000c2c  00010c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c44  08000c44  00010c4c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c44  08000c44  00010c4c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c44  08000c4c  00010c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c44  08000c44  00010c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c48  08000c48  00010c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000000  08000c4c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000c4c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004097  00000000  00000000  00010c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a19  00000000  00000000  00014d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000aac  00000000  00000000  00015725  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e0  00000000  00000000  000161d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  000163b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f6b  00000000  00000000  00016540  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000023fd  00000000  00000000  000174ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009be2  00000000  00000000  000198a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002348a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005cc  00000000  00000000  00023508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c14 	.word	0x08000c14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c14 	.word	0x08000c14

08000170 <EXTI0_IRQHandler>:
 * 								ISR Functions
 * =============================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 5)) { EXTI->PR |= (1 << 5); GP_IRQ_CallBack[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1 << 6)) { EXTI->PR |= (1 << 6); GP_IRQ_CallBack[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1 << 7)) { EXTI->PR |= (1 << 7); GP_IRQ_CallBack[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1 << 8)) { EXTI->PR |= (1 << 8); GP_IRQ_CallBack[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1 << 9); GP_IRQ_CallBack[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 10)) { EXTI->PR |= (1 << 10); GP_IRQ_CallBack[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1 << 11)) { EXTI->PR |= (1 << 11); GP_IRQ_CallBack[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1 << 12)) { EXTI->PR |= (1 << 12); GP_IRQ_CallBack[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1 << 13)) { EXTI->PR |= (1 << 13); GP_IRQ_CallBack[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1 << 14)) { EXTI->PR |= (1 << 14); GP_IRQ_CallBack[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1 << 15)) { EXTI->PR |= (1 << 15); GP_IRQ_CallBack[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <Get_CRLH_Position>:
 * 								Generic Functions
 * =============================================================================
 */


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	//CRL Pins
	case GPIO_PIN_0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;

		//CRH Pins
	case GPIO_PIN_8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	}

	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * Note				- STM32F103x8 MCU has GPIO A,B,C,D,E Modules
 *					  but LQFP48 Package has only GPIO A,B,a part of C/D
 *					  exported as external PINs from the MCU
 */
void MCAL_GPIO_Init(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig )
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) (x=A..G) FOR PINs 0 >> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G)	FOR PINs 8 >> 16

	volatile uint32_t* configRegister = (PinConfig->GPIO_PinNumber <GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	2bff      	cmp	r3, #255	; 0xff
 8000466:	d801      	bhi.n	800046c <MCAL_GPIO_Init+0x16>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	e001      	b.n	8000470 <MCAL_GPIO_Init+0x1a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3304      	adds	r3, #4
 8000470:	60fb      	str	r3, [r7, #12]
	volatile uint8_t pin_config =0;
 8000472:	2300      	movs	r3, #0
 8000474:	72fb      	strb	r3, [r7, #11]


	//clear CNFx[1:0] MODEx[1:0] [4 bits]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff88 	bl	8000390 <Get_CRLH_Position>
 8000480:	4603      	mov	r3, r0
 8000482:	461a      	mov	r2, r3
 8000484:	230f      	movs	r3, #15
 8000486:	4093      	lsls	r3, r2
 8000488:	43da      	mvns	r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	401a      	ands	r2, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	601a      	str	r2, [r3, #0]

	//check if selected mode is OUTPUT
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD)|| (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP)|| (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) )
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2b04      	cmp	r3, #4
 800049a:	d00b      	beq.n	80004b4 <MCAL_GPIO_Init+0x5e>
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	d007      	beq.n	80004b4 <MCAL_GPIO_Init+0x5e>
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b06      	cmp	r3, #6
 80004aa:	d003      	beq.n	80004b4 <MCAL_GPIO_Init+0x5e>
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	789b      	ldrb	r3, [r3, #2]
 80004b0:	2b07      	cmp	r3, #7
 80004b2:	d10f      	bne.n	80004d4 <MCAL_GPIO_Init+0x7e>
	{
		pin_config = ( (( (PinConfig->GPIO_Mode - 4) << 2 ) | (PinConfig->GPIO_Output_Speed)) & 0x0f) ;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	3b04      	subs	r3, #4
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	b25a      	sxtb	r2, r3
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	78db      	ldrb	r3, [r3, #3]
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	4313      	orrs	r3, r2
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 030f 	and.w	r3, r3, #15
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	72fb      	strb	r3, [r7, #11]
 80004d2:	e02d      	b.n	8000530 <MCAL_GPIO_Init+0xda>

	}
	else{ 	//configure pins if selected mode is INTPUT MODEx[1:0]=0x00


		if( (PinConfig->GPIO_Mode == GPIO_MODE_ANALOG) || (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO) ){
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	789b      	ldrb	r3, [r3, #2]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d003      	beq.n	80004e4 <MCAL_GPIO_Init+0x8e>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d108      	bne.n	80004f6 <MCAL_GPIO_Init+0xa0>

			pin_config = ( (( (PinConfig->GPIO_Mode ) << 2 ) | 0x00 ) & 0x0f) ;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	789b      	ldrb	r3, [r3, #2]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f003 030f 	and.w	r3, r3, #15
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	72fb      	strb	r3, [r7, #11]
 80004f4:	e01c      	b.n	8000530 <MCAL_GPIO_Init+0xda>

		}else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT){ //considered as floating input
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d102      	bne.n	8000504 <MCAL_GPIO_Init+0xae>

			pin_config = ( (( (GPIO_MODE_INPUT_FLO) << 2 ) | 0x00 ) & 0x0f) ;
 80004fe:	2304      	movs	r3, #4
 8000500:	72fb      	strb	r3, [r7, #11]
 8000502:	e015      	b.n	8000530 <MCAL_GPIO_Init+0xda>

		}else{

			pin_config = ( (( (GPIO_MODE_INPUT_PU) << 2 ) | 0x00 ) & 0x0f) ;
 8000504:	2308      	movs	r3, #8
 8000506:	72fb      	strb	r3, [r7, #11]

			//to select between PullUp and PullDown modes
			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU){
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d107      	bne.n	8000520 <MCAL_GPIO_Init+0xca>

				//table 20.Port bit configuration table : PxODR -> 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	e007      	b.n	8000530 <MCAL_GPIO_Init+0xda>

			}else{
				//table 20.Port bit configuration table : PxODR -> 1
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]


	}

	//Set configRegister [CRL/CRH] PINs to the requires values
	(*configRegister) |= ( (pin_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000530:	7afb      	ldrb	r3, [r7, #11]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461c      	mov	r4, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ff28 	bl	8000390 <Get_CRLH_Position>
 8000540:	4603      	mov	r3, r0
 8000542:	fa04 f203 	lsl.w	r2, r4, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	431a      	orrs	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}

08000558 <MCAL_RCC_GetSYSCLKFreq>:
 * =============================================================================
 * 							API Functions Definitions
 * =============================================================================
 */

uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch(((RCC->CFGR >> 2) & 0b11 ))
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	089b      	lsrs	r3, r3, #2
 8000562:	f003 0303 	and.w	r3, r3, #3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d006      	beq.n	8000578 <MCAL_RCC_GetSYSCLKFreq+0x20>
 800056a:	2b01      	cmp	r3, #1
 800056c:	d302      	bcc.n	8000574 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 800056e:	2b02      	cmp	r3, #2
 8000570:	d004      	beq.n	800057c <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000572:	e005      	b.n	8000580 <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
	case 0b00:
		return HSI_RC_CLOCK;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000576:	e003      	b.n	8000580 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 0b01:

		//todo you need to calculate it //HSE user should specify it
		return HSE_CLOCK;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 800057a:	e001      	b.n	8000580 <MCAL_RCC_GetSYSCLKFreq+0x28>
	case 0b10:

		//todo you need to calculate it PLLCLK & PLLMUL & PLL Source MUX user should specify it

		//this needs calculations
		return 16000000;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 800057e:	e7ff      	b.n	8000580 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;


	}
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000
 800058c:	007a1200 	.word	0x007a1200
 8000590:	00f42400 	.word	0x00f42400

08000594 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	//each shift 1 right = divide by 2
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHB_PrescTable[(RCC->CFGR >> 4) & 0xF] ) ;
 8000598:	f7ff ffde 	bl	8000558 <MCAL_RCC_GetSYSCLKFreq>
 800059c:	4601      	mov	r1, r0
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <MCAL_RCC_GetHCLKFreq+0x20>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	091b      	lsrs	r3, r3, #4
 80005a4:	f003 030f 	and.w	r3, r3, #15
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005b0:	4618      	mov	r0, r3
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	08000c2c 	.word	0x08000c2c

080005bc <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	 //each shift 1 right = divide by 2

	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APB_PrescTable[(RCC->CFGR >> 8) & 0b111] ) ;
 80005c0:	f7ff ffe8 	bl	8000594 <MCAL_RCC_GetHCLKFreq>
 80005c4:	4601      	mov	r1, r0
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	0a1b      	lsrs	r3, r3, #8
 80005cc:	f003 0307 	and.w	r3, r3, #7
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	08000c3c 	.word	0x08000c3c

080005e4 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	 //each shift 1 right = divide by 2

 //Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APB_PrescTable[(RCC->CFGR >> 11) & 0b111] ) ;
 80005e8:	f7ff ffd4 	bl	8000594 <MCAL_RCC_GetHCLKFreq>
 80005ec:	4601      	mov	r1, r0
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	0adb      	lsrs	r3, r3, #11
 80005f4:	f003 0307 	and.w	r3, r3, #7
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000600:	4618      	mov	r0, r3
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	08000c3c 	.word	0x08000c3c

0800060c <MCAL_UART_Init>:
 * @Parameter [in] 	- USARTx: where x can be 1/2/3 depending on device
 * @Parameter [in]	- UART_Config: All UART Configurations
 * @Return Value	- NONE
 * Note				- Supports For now ASYNCHRONOUS Mode & Clock 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx ,UART_Config* UART_Config){
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	uint32_t USARTDIV_MUL100 ,DIV_Mantissa,DIV_Fraction,DIV_Mantissa_MUL100;



	//set GLOBAL_UART_Config for USARTx used
	if(USARTx == USART1){
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a6b      	ldr	r2, [pc, #428]	; (80007c8 <MCAL_UART_Init+0x1bc>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d108      	bne.n	8000630 <MCAL_UART_Init+0x24>
		GLOBAL_UART_Config[0] = *UART_Config;
 800061e:	4a6b      	ldr	r2, [pc, #428]	; (80007cc <MCAL_UART_Init+0x1c0>)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	4614      	mov	r4, r2
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	6023      	str	r3, [r4, #0]
 800062e:	e01a      	b.n	8000666 <MCAL_UART_Init+0x5a>

	}else if(USARTx == USART2){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a67      	ldr	r2, [pc, #412]	; (80007d0 <MCAL_UART_Init+0x1c4>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d109      	bne.n	800064c <MCAL_UART_Init+0x40>
		GLOBAL_UART_Config[1] = *UART_Config;
 8000638:	4b64      	ldr	r3, [pc, #400]	; (80007cc <MCAL_UART_Init+0x1c0>)
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	f103 0414 	add.w	r4, r3, #20
 8000640:	4615      	mov	r5, r2
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	6023      	str	r3, [r4, #0]
 800064a:	e00c      	b.n	8000666 <MCAL_UART_Init+0x5a>

	}else if(USARTx == USART3){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a61      	ldr	r2, [pc, #388]	; (80007d4 <MCAL_UART_Init+0x1c8>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d108      	bne.n	8000666 <MCAL_UART_Init+0x5a>
		GLOBAL_UART_Config[2] = *UART_Config;
 8000654:	4b5d      	ldr	r3, [pc, #372]	; (80007cc <MCAL_UART_Init+0x1c0>)
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800065c:	4615      	mov	r5, r2
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	682b      	ldr	r3, [r5, #0]
 8000664:	6023      	str	r3, [r4, #0]
	}


	//enable clock for USARTx
	if(USARTx == USART1){
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a57      	ldr	r2, [pc, #348]	; (80007c8 <MCAL_UART_Init+0x1bc>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d106      	bne.n	800067c <MCAL_UART_Init+0x70>
		RCC_USART1_CLK_EN();
 800066e:	4b5a      	ldr	r3, [pc, #360]	; (80007d8 <MCAL_UART_Init+0x1cc>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a59      	ldr	r2, [pc, #356]	; (80007d8 <MCAL_UART_Init+0x1cc>)
 8000674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	e014      	b.n	80006a6 <MCAL_UART_Init+0x9a>

	}else if(USARTx == USART2){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a54      	ldr	r2, [pc, #336]	; (80007d0 <MCAL_UART_Init+0x1c4>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d106      	bne.n	8000692 <MCAL_UART_Init+0x86>
		RCC_USART2_CLK_EN();
 8000684:	4b54      	ldr	r3, [pc, #336]	; (80007d8 <MCAL_UART_Init+0x1cc>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a53      	ldr	r2, [pc, #332]	; (80007d8 <MCAL_UART_Init+0x1cc>)
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	e009      	b.n	80006a6 <MCAL_UART_Init+0x9a>

	}else if(USARTx == USART3){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a4f      	ldr	r2, [pc, #316]	; (80007d4 <MCAL_UART_Init+0x1c8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d105      	bne.n	80006a6 <MCAL_UART_Init+0x9a>
		RCC_USART3_CLK_EN();
 800069a:	4b4f      	ldr	r3, [pc, #316]	; (80007d8 <MCAL_UART_Init+0x1cc>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a4e      	ldr	r2, [pc, #312]	; (80007d8 <MCAL_UART_Init+0x1cc>)
 80006a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a4:	61d3      	str	r3, [r2, #28]
	}

	//Enable USART Module
	USARTx->CR1 |= 1<<13 ;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60da      	str	r2, [r3, #12]

	//Specify Tx/Rx Enable/Disable based on @ref UART_Mode_Define
	USARTx->CR1 |= UART_Config->UART_Mode;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	60da      	str	r2, [r3, #12]

	//Specify Payload_Length
	USARTx->CR1 |= UART_Config->Payload_Length;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	7a12      	ldrb	r2, [r2, #8]
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60da      	str	r2, [r3, #12]

	//Specify Parity
	USARTx->CR1 |= UART_Config->Parity;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	7a52      	ldrb	r2, [r2, #9]
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]

	//Specify StopBits
	USARTx->CR2 |= UART_Config->StopBits;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	7a92      	ldrb	r2, [r2, #10]
 80006e4:	431a      	orrs	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	611a      	str	r2, [r3, #16]

	//Specify HW Flow Control
	USARTx->CR3 |= UART_Config->HwFlowCtrl;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	7ad2      	ldrb	r2, [r2, #11]
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	615a      	str	r2, [r3, #20]

	// set BaudRate Register (BRR)
	//PCLK1 For USART2 ,USART3
	//PCLK2 For USART1

	if(USARTx == USART1){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a33      	ldr	r2, [pc, #204]	; (80007c8 <MCAL_UART_Init+0x1bc>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d103      	bne.n	8000708 <MCAL_UART_Init+0xfc>

		Pclk =MCAL_RCC_GetPCLK2Freq();
 8000700:	f7ff ff70 	bl	80005e4 <MCAL_RCC_GetPCLK2Freq>
 8000704:	61f8      	str	r0, [r7, #28]
 8000706:	e002      	b.n	800070e <MCAL_UART_Init+0x102>
	}else {
		Pclk =MCAL_RCC_GetPCLK1Freq();
 8000708:	f7ff ff58 	bl	80005bc <MCAL_RCC_GetPCLK1Freq>
 800070c:	61f8      	str	r0, [r7, #28]
	}

	USARTDIV_MUL100 = (25UL*Pclk) / (4UL*UART_Config->BaudRate);
 800070e:	69fa      	ldr	r2, [r7, #28]
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	009a      	lsls	r2, r3, #2
 8000718:	441a      	add	r2, r3
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	fbb2 f3f3 	udiv	r3, r2, r3
 8000724:	61bb      	str	r3, [r7, #24]

	DIV_Mantissa_MUL100 = (USARTDIV_MUL100/100) * 100;
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <MCAL_UART_Init+0x1d0>)
 800072a:	fba2 2303 	umull	r2, r3, r2, r3
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	fb02 f303 	mul.w	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]

	DIV_Mantissa = DIV_Mantissa_MUL100 / 100 ;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	4a28      	ldr	r2, [pc, #160]	; (80007dc <MCAL_UART_Init+0x1d0>)
 800073c:	fba2 2303 	umull	r2, r3, r2, r3
 8000740:	095b      	lsrs	r3, r3, #5
 8000742:	613b      	str	r3, [r7, #16]

	DIV_Fraction = ((USARTDIV_MUL100-DIV_Mantissa_MUL100)*16)/100;   //USARTDIV_MUL100 = DIV_Mantissa_MUL100 + (16*100*DIV_Fraction)
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	4a23      	ldr	r2, [pc, #140]	; (80007dc <MCAL_UART_Init+0x1d0>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	095b      	lsrs	r3, r3, #5
 8000754:	60fb      	str	r3, [r7, #12]


	BRR = (DIV_Mantissa << 4 ) | (DIV_Fraction & 0xF) ;
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	011a      	lsls	r2, r3, #4
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f003 030f 	and.w	r3, r3, #15
 8000760:	4313      	orrs	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	609a      	str	r2, [r3, #8]


	//Enable / Disable Interrupt
	//USART_CR1

	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE){
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	7b1b      	ldrb	r3, [r3, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d026      	beq.n	80007c0 <MCAL_UART_Init+0x1b4>

		USARTx->CR1 |= UART_Config->IRQ_Enable;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	7b12      	ldrb	r2, [r2, #12]
 800077a:	431a      	orrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	60da      	str	r2, [r3, #12]


		//Enable NVIC For USARTx IRQ
		if(USARTx == USART1){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <MCAL_UART_Init+0x1bc>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <MCAL_UART_Init+0x18a>
			NVIC_IRQ37_USART1_ENABLE();
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MCAL_UART_Init+0x1d4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <MCAL_UART_Init+0x1d4>)
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	6013      	str	r3, [r2, #0]
	}




}
 8000794:	e014      	b.n	80007c0 <MCAL_UART_Init+0x1b4>
		}else if(USARTx == USART2){
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <MCAL_UART_Init+0x1c4>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d106      	bne.n	80007ac <MCAL_UART_Init+0x1a0>
			NVIC_IRQ38_USART2_ENABLE();
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MCAL_UART_Init+0x1d4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MCAL_UART_Init+0x1d4>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	e009      	b.n	80007c0 <MCAL_UART_Init+0x1b4>
		}else if(USARTx == USART3){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <MCAL_UART_Init+0x1c8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d105      	bne.n	80007c0 <MCAL_UART_Init+0x1b4>
			NVIC_IRQ39_USART3_ENABLE();
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MCAL_UART_Init+0x1d4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <MCAL_UART_Init+0x1d4>)
 80007ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bdb0      	pop	{r4, r5, r7, pc}
 80007c8:	40013800 	.word	0x40013800
 80007cc:	2000005c 	.word	0x2000005c
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40004800 	.word	0x40004800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	51eb851f 	.word	0x51eb851f
 80007e0:	e000e104 	.word	0xe000e104

080007e4 <MCAL_UART_GPIO_Set_Pins>:
 * @Brief 			- Set GPIO pins to UART using AFIO Based on STM32F103x8 LQFP48 Package
 * @Parameter [in] 	- USARTx: where x can be 1/2/3 depending on device
 * @Return Value	- NONE
 * Note				-This Function should be used after Initializations
 */
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t PinConfig;

	if(USARTx == USART1){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a2b      	ldr	r2, [pc, #172]	; (800089c <MCAL_UART_GPIO_Set_Pins+0xb8>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d118      	bne.n	8000826 <MCAL_UART_GPIO_Set_Pins+0x42>
		//CTS --> PA11
		//RTS --> PA12
		//---------------------//

		//Tx  --> PA9
		PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 80007f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f8:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80007fa:	2306      	movs	r3, #6
 80007fc:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4825      	ldr	r0, [pc, #148]	; (80008a0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800080a:	f7ff fe24 	bl	8000456 <MCAL_GPIO_Init>

		//Rx  --> PA10
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000814:	2308      	movs	r3, #8
 8000816:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4820      	ldr	r0, [pc, #128]	; (80008a0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000820:	f7ff fe19 	bl	8000456 <MCAL_GPIO_Init>

	}



}
 8000824:	e036      	b.n	8000894 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx == USART2){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d116      	bne.n	800085c <MCAL_UART_GPIO_Set_Pins+0x78>
		PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 800082e:	2304      	movs	r3, #4
 8000830:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000832:	2306      	movs	r3, #6
 8000834:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4817      	ldr	r0, [pc, #92]	; (80008a0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000842:	f7ff fe08 	bl	8000456 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000846:	2308      	movs	r3, #8
 8000848:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_Mode = GPIO_MODE_AF_INPUT;
 800084a:	2308      	movs	r3, #8
 800084c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinConfig);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000856:	f7ff fdfe 	bl	8000456 <MCAL_GPIO_Init>
}
 800085a:	e01b      	b.n	8000894 <MCAL_UART_GPIO_Set_Pins+0xb0>
	}else if(USARTx == USART3){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d117      	bne.n	8000894 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000868:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800086a:	2306      	movs	r3, #6
 800086c:	73bb      	strb	r3, [r7, #14]
		PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MCAL_UART_GPIO_Set_Pins+0xc8>)
 800087a:	f7ff fdec 	bl	8000456 <MCAL_GPIO_Init>
		PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 800087e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000882:	81bb      	strh	r3, [r7, #12]
		PinConfig.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000884:	2308      	movs	r3, #8
 8000886:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000890:	f7ff fde1 	bl	8000456 <MCAL_GPIO_Init>
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40013800 	.word	0x40013800
 80008a0:	40010800 	.word	0x40010800
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40004800 	.word	0x40004800
 80008ac:	40010c00 	.word	0x40010c00

080008b0 <MCAL_UART_SendData>:
						the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
						because it is replaced by the parity.
						When receiving with the parity enabled, the value read in the MSB bit is the received parity
						bit.
 */
void MCAL_UART_SendData(USART_t* USARTx, uint16_t *pTxBuffer,enum Polling_mechanism PollingEn){
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	4613      	mov	r3, r2
 80008bc:	71fb      	strb	r3, [r7, #7]



	//poll for TXE Pin
	if(PollingEn == enable){
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d107      	bne.n	80008d4 <MCAL_UART_SendData+0x24>
	is cleared by a write to the USART_DR register.
	0: Data is not transferred to the shift register
	1: Data is transferred to the shift register)
	Note: This bit is used during single buffer transmission.*/

		while( GET_BIT(USARTx->SR,7) == 0 ) ; //wait
 80008c4:	bf00      	nop
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	09db      	lsrs	r3, r3, #7
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f8      	beq.n	80008c6 <MCAL_UART_SendData+0x16>
	}

	//set GLOBAL_UART_Config for USARTx used
	if(USARTx == USART1){
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <MCAL_UART_SendData+0x68>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d105      	bne.n	80008e8 <MCAL_UART_SendData+0x38>

			USARTx->DR = (*pTxBuffer & (uint16_t)0x1FF);

		}else{

			USARTx->DR = (*pTxBuffer & (uint16_t)0xFF);
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	605a      	str	r2, [r3, #4]
	}




}
 80008e6:	e012      	b.n	800090e <MCAL_UART_SendData+0x5e>
	}else if(USARTx == USART2){
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <MCAL_UART_SendData+0x6c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d105      	bne.n	80008fc <MCAL_UART_SendData+0x4c>
			USARTx->DR = (*pTxBuffer & (uint16_t)0xFF);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	605a      	str	r2, [r3, #4]
}
 80008fa:	e008      	b.n	800090e <MCAL_UART_SendData+0x5e>
	}else if(USARTx == USART3){
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <MCAL_UART_SendData+0x70>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d104      	bne.n	800090e <MCAL_UART_SendData+0x5e>
			USARTx->DR = (*pTxBuffer & (uint16_t)0xFF);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	605a      	str	r2, [r3, #4]
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40013800 	.word	0x40013800
 800091c:	40004400 	.word	0x40004400
 8000920:	40004800 	.word	0x40004800

08000924 <MCAL_UART_ReceiveData>:
						the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
						because it is replaced by the parity.
						When receiving with the parity enabled, the value read in the MSB bit is the received parity
						bit.
 */
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer,enum Polling_mechanism PollingEn){
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	4613      	mov	r3, r2
 8000930:	71fb      	strb	r3, [r7, #7]

	UART_Config* Temp_UART_Config = NULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]

	//poll for RXNE Pin
	if(PollingEn == enable){
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d107      	bne.n	800094c <MCAL_UART_ReceiveData+0x28>
		writing a zero to it. This clearing sequence is recommended only for multibuffer
		communication.
		0: Data is not received
		1: Received data is ready to be read.*/

		while( GET_BIT(USARTx->SR,5) == 0 ) ; //Wait
 800093c:	bf00      	nop
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f8      	beq.n	800093e <MCAL_UART_ReceiveData+0x1a>
	}

	//set GLOBAL_UART_Config for USARTx used
	if(USARTx == USART1){
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <MCAL_UART_ReceiveData+0x84>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d102      	bne.n	800095a <MCAL_UART_ReceiveData+0x36>
		Temp_UART_Config =	&GLOBAL_UART_Config[0] ;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MCAL_UART_ReceiveData+0x88>)
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00c      	b.n	8000974 <MCAL_UART_ReceiveData+0x50>

	}else if(USARTx == USART2){
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <MCAL_UART_ReceiveData+0x8c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d102      	bne.n	8000968 <MCAL_UART_ReceiveData+0x44>
		Temp_UART_Config =	&GLOBAL_UART_Config[1] ;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MCAL_UART_ReceiveData+0x90>)
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e005      	b.n	8000974 <MCAL_UART_ReceiveData+0x50>

	}else if(USARTx == USART3){
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <MCAL_UART_ReceiveData+0x94>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d101      	bne.n	8000974 <MCAL_UART_ReceiveData+0x50>
		Temp_UART_Config =	&GLOBAL_UART_Config[2] ;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MCAL_UART_ReceiveData+0x98>)
 8000972:	617b      	str	r3, [r7, #20]


	}else{

		//Check if parity is Enabled
		if(Temp_UART_Config->Parity == UART_Parity_NONE){
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	7a5b      	ldrb	r3, [r3, #9]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <MCAL_UART_ReceiveData+0x68>

			//Read Least 8Bit from data register content
			*pRxBuffer	= (USARTx->DR & (uint16_t)0xFF);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	b29a      	uxth	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	801a      	strh	r2, [r3, #0]
			*pRxBuffer	= (USARTx->DR & (uint16_t)0x7F);
		}

	}

}
 800098a:	e007      	b.n	800099c <MCAL_UART_ReceiveData+0x78>
			*pRxBuffer	= (USARTx->DR & (uint16_t)0x7F);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	b29b      	uxth	r3, r3
 8000992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000996:	b29a      	uxth	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	801a      	strh	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	371c      	adds	r7, #28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40013800 	.word	0x40013800
 80009ac:	2000005c 	.word	0x2000005c
 80009b0:	40004400 	.word	0x40004400
 80009b4:	20000070 	.word	0x20000070
 80009b8:	40004800 	.word	0x40004800
 80009bc:	20000084 	.word	0x20000084

080009c0 <USART1_IRQHandler>:
 * 							ISR DEFINATIONS
 * =============================================================================
 */

/* USART1 global interrupt  */
void USART1_IRQHandler(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

	GLOBAL_UART_Config[0].P_IRQ_CallBack();
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <USART1_IRQHandler+0x10>)
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	4798      	blx	r3

}  
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000005c 	.word	0x2000005c

080009d4 <USART2_IRQHandler>:


/* USART2 global interrupt */
void USART2_IRQHandler(void){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

	GLOBAL_UART_Config[1].P_IRQ_CallBack();
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <USART2_IRQHandler+0x10>)
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	4798      	blx	r3


}        			
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000005c 	.word	0x2000005c

080009e8 <USART3_IRQHandler>:


/* USART3 global interrupt */
void USART3_IRQHandler(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

	GLOBAL_UART_Config[2].P_IRQ_CallBack();
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <USART3_IRQHandler+0x10>)
 80009ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f0:	4798      	blx	r3

}        			
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000005c 	.word	0x2000005c

080009fc <clock_init>:
#include "STM32F103x8_GPIO_driver.h"
#include "STM32F103x8_USART_driver.h"

extern void delay_ms(uint32_t time);

void clock_init(void){
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	RCC_AFIO_CLK_EN();
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <clock_init+0x30>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <clock_init+0x30>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <clock_init+0x30>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <clock_init+0x30>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <clock_init+0x30>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <clock_init+0x30>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6193      	str	r3, [r2, #24]


}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40021000 	.word	0x40021000

08000a30 <UART1_CallBack>:

uint16_t Buffer ;

void UART1_CallBack(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART1 , &Buffer , disable);
 8000a34:	2201      	movs	r2, #1
 8000a36:	490a      	ldr	r1, [pc, #40]	; (8000a60 <UART1_CallBack+0x30>)
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <UART1_CallBack+0x34>)
 8000a3a:	f7ff ff73 	bl	8000924 <MCAL_UART_ReceiveData>

	MCAL_UART_SendData(USART1, &Buffer , enable);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4907      	ldr	r1, [pc, #28]	; (8000a60 <UART1_CallBack+0x30>)
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <UART1_CallBack+0x34>)
 8000a44:	f7ff ff34 	bl	80008b0 <MCAL_UART_SendData>
	MCAL_UART_SendData(USART2, &Buffer , enable);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4905      	ldr	r1, [pc, #20]	; (8000a60 <UART1_CallBack+0x30>)
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <UART1_CallBack+0x38>)
 8000a4e:	f7ff ff2f 	bl	80008b0 <MCAL_UART_SendData>
	MCAL_UART_SendData(USART3, &Buffer , enable);
 8000a52:	2200      	movs	r2, #0
 8000a54:	4902      	ldr	r1, [pc, #8]	; (8000a60 <UART1_CallBack+0x30>)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <UART1_CallBack+0x3c>)
 8000a58:	f7ff ff2a 	bl	80008b0 <MCAL_UART_SendData>

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000098 	.word	0x20000098
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40004800 	.word	0x40004800

08000a70 <UART2_CallBack>:

void UART2_CallBack(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART2 , &Buffer , disable);
 8000a74:	2201      	movs	r2, #1
 8000a76:	490a      	ldr	r1, [pc, #40]	; (8000aa0 <UART2_CallBack+0x30>)
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <UART2_CallBack+0x34>)
 8000a7a:	f7ff ff53 	bl	8000924 <MCAL_UART_ReceiveData>

	MCAL_UART_SendData(USART1, &Buffer , enable);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <UART2_CallBack+0x30>)
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <UART2_CallBack+0x38>)
 8000a84:	f7ff ff14 	bl	80008b0 <MCAL_UART_SendData>
	MCAL_UART_SendData(USART2, &Buffer , enable);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4905      	ldr	r1, [pc, #20]	; (8000aa0 <UART2_CallBack+0x30>)
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <UART2_CallBack+0x34>)
 8000a8e:	f7ff ff0f 	bl	80008b0 <MCAL_UART_SendData>
	MCAL_UART_SendData(USART3, &Buffer , enable);
 8000a92:	2200      	movs	r2, #0
 8000a94:	4902      	ldr	r1, [pc, #8]	; (8000aa0 <UART2_CallBack+0x30>)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <UART2_CallBack+0x3c>)
 8000a98:	f7ff ff0a 	bl	80008b0 <MCAL_UART_SendData>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000098 	.word	0x20000098
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	40004800 	.word	0x40004800

08000ab0 <UART3_CallBack>:

void UART3_CallBack(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART3 , &Buffer , disable);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	490a      	ldr	r1, [pc, #40]	; (8000ae0 <UART3_CallBack+0x30>)
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <UART3_CallBack+0x34>)
 8000aba:	f7ff ff33 	bl	8000924 <MCAL_UART_ReceiveData>

	MCAL_UART_SendData(USART1, &Buffer , enable);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <UART3_CallBack+0x30>)
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <UART3_CallBack+0x38>)
 8000ac4:	f7ff fef4 	bl	80008b0 <MCAL_UART_SendData>
	MCAL_UART_SendData(USART2, &Buffer , enable);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4905      	ldr	r1, [pc, #20]	; (8000ae0 <UART3_CallBack+0x30>)
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <UART3_CallBack+0x3c>)
 8000ace:	f7ff feef 	bl	80008b0 <MCAL_UART_SendData>
	MCAL_UART_SendData(USART3, &Buffer , enable);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4902      	ldr	r1, [pc, #8]	; (8000ae0 <UART3_CallBack+0x30>)
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <UART3_CallBack+0x34>)
 8000ad8:	f7ff feea 	bl	80008b0 <MCAL_UART_SendData>

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000098 	.word	0x20000098
 8000ae4:	40004800 	.word	0x40004800
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40004400 	.word	0x40004400

08000af0 <main>:


int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
	//Initializations
	clock_init();
 8000af6:	f7ff ff81 	bl	80009fc <clock_init>


	UART_Config UART_Cnfg;

	//USART1 init
	UART_Cnfg.BaudRate 			= UART_BaudRate_115200;
 8000afa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000afe:	60bb      	str	r3, [r7, #8]
	UART_Cnfg.UART_Mode 		= UART_Mode_TX_RX;
 8000b00:	230c      	movs	r3, #12
 8000b02:	713b      	strb	r3, [r7, #4]
	UART_Cnfg.Parity 			= UART_Parity_NONE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	737b      	strb	r3, [r7, #13]
	UART_Cnfg.Payload_Length 	= UART_Payload_Length_8B;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	733b      	strb	r3, [r7, #12]
	UART_Cnfg.StopBits			= UART_StopBits_1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73bb      	strb	r3, [r7, #14]
	UART_Cnfg.HwFlowCtrl		= UART_HwFlowCtrl_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

	UART_Cnfg.IRQ_Enable		= UART_IRQ_Enable_RXNE;
 8000b14:	2320      	movs	r3, #32
 8000b16:	743b      	strb	r3, [r7, #16]
	UART_Cnfg.P_IRQ_CallBack	= UART1_CallBack;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <main+0x70>)
 8000b1a:	617b      	str	r3, [r7, #20]

	MCAL_UART_Init(USART1, &UART_Cnfg);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4810      	ldr	r0, [pc, #64]	; (8000b64 <main+0x74>)
 8000b22:	f7ff fd73 	bl	800060c <MCAL_UART_Init>



	//USART2 init with same settings
	UART_Cnfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 8000b26:	2320      	movs	r3, #32
 8000b28:	743b      	strb	r3, [r7, #16]
	UART_Cnfg.P_IRQ_CallBack	= UART2_CallBack;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <main+0x78>)
 8000b2c:	617b      	str	r3, [r7, #20]

	MCAL_UART_Init(USART2, &UART_Cnfg);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <main+0x7c>)
 8000b34:	f7ff fd6a 	bl	800060c <MCAL_UART_Init>


	//USART3 init with same settings
	UART_Cnfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	743b      	strb	r3, [r7, #16]
	UART_Cnfg.P_IRQ_CallBack	= UART3_CallBack;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <main+0x80>)
 8000b3e:	617b      	str	r3, [r7, #20]

	MCAL_UART_Init(USART3, &UART_Cnfg);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <main+0x84>)
 8000b46:	f7ff fd61 	bl	800060c <MCAL_UART_Init>


	MCAL_UART_GPIO_Set_Pins(USART3);
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <main+0x84>)
 8000b4c:	f7ff fe4a 	bl	80007e4 <MCAL_UART_GPIO_Set_Pins>
	MCAL_UART_GPIO_Set_Pins(USART2);
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <main+0x7c>)
 8000b52:	f7ff fe47 	bl	80007e4 <MCAL_UART_GPIO_Set_Pins>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <main+0x74>)
 8000b58:	f7ff fe44 	bl	80007e4 <MCAL_UART_GPIO_Set_Pins>
	while(1)
 8000b5c:	e7fe      	b.n	8000b5c <main+0x6c>
 8000b5e:	bf00      	nop
 8000b60:	08000a31 	.word	0x08000a31
 8000b64:	40013800 	.word	0x40013800
 8000b68:	08000a71 	.word	0x08000a71
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	08000ab1 	.word	0x08000ab1
 8000b74:	40004800 	.word	0x40004800

08000b78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ba6:	f000 f811 	bl	8000bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000baa:	f7ff ffa1 	bl	8000af0 <main>

08000bae <LoopForever>:

LoopForever:
    b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
  ldr   r0, =_estack
 8000bb0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bbc:	08000c4c 	.word	0x08000c4c
  ldr r2, =_sbss
 8000bc0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bc4:	2000009c 	.word	0x2000009c

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <__libc_init_array>:
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	2500      	movs	r5, #0
 8000bd0:	4e0c      	ldr	r6, [pc, #48]	; (8000c04 <__libc_init_array+0x38>)
 8000bd2:	4c0d      	ldr	r4, [pc, #52]	; (8000c08 <__libc_init_array+0x3c>)
 8000bd4:	1ba4      	subs	r4, r4, r6
 8000bd6:	10a4      	asrs	r4, r4, #2
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	d109      	bne.n	8000bf0 <__libc_init_array+0x24>
 8000bdc:	f000 f81a 	bl	8000c14 <_init>
 8000be0:	2500      	movs	r5, #0
 8000be2:	4e0a      	ldr	r6, [pc, #40]	; (8000c0c <__libc_init_array+0x40>)
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <__libc_init_array+0x44>)
 8000be6:	1ba4      	subs	r4, r4, r6
 8000be8:	10a4      	asrs	r4, r4, #2
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d105      	bne.n	8000bfa <__libc_init_array+0x2e>
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf4:	4798      	blx	r3
 8000bf6:	3501      	adds	r5, #1
 8000bf8:	e7ee      	b.n	8000bd8 <__libc_init_array+0xc>
 8000bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bfe:	4798      	blx	r3
 8000c00:	3501      	adds	r5, #1
 8000c02:	e7f2      	b.n	8000bea <__libc_init_array+0x1e>
 8000c04:	08000c44 	.word	0x08000c44
 8000c08:	08000c44 	.word	0x08000c44
 8000c0c:	08000c44 	.word	0x08000c44
 8000c10:	08000c48 	.word	0x08000c48

08000c14 <_init>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	bf00      	nop
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr

08000c20 <_fini>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr
