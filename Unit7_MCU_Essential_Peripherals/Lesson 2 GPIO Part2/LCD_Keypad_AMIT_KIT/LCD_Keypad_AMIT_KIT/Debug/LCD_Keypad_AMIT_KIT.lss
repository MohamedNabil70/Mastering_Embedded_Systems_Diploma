
LCD_Keypad_AMIT_KIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000076c  000007e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016dd  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000862  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b3a  00000000  00000000  000028b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  000033f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d7  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ea2  00000000  00000000  00003c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 69 03 	call	0x6d2	; 0x6d2 <main>
  7a:	0c 94 b4 03 	jmp	0x768	; 0x768 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
		
	case DIO_PORTC:
	TOG_BIT(PORTC,PinId);
	break;	
	case DIO_PORTD:
	TOG_BIT(PORTD,PinId);	
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <DIO_getPinValue>:
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	08 f0       	brcs	.+2      	; 0x260 <DIO_getPinValue+0x6>
 25e:	4e c0       	rjmp	.+156    	; 0x2fc <DIO_getPinValue+0xa2>
 260:	68 30       	cpi	r22, 0x08	; 8
 262:	08 f0       	brcs	.+2      	; 0x266 <DIO_getPinValue+0xc>
 264:	4b c0       	rjmp	.+150    	; 0x2fc <DIO_getPinValue+0xa2>
 266:	41 15       	cp	r20, r1
 268:	51 05       	cpc	r21, r1
 26a:	09 f4       	brne	.+2      	; 0x26e <DIO_getPinValue+0x14>
 26c:	47 c0       	rjmp	.+142    	; 0x2fc <DIO_getPinValue+0xa2>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	b1 f0       	breq	.+44     	; 0x29e <DIO_getPinValue+0x44>
 272:	28 f0       	brcs	.+10     	; 0x27e <DIO_getPinValue+0x24>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	19 f1       	breq	.+70     	; 0x2be <DIO_getPinValue+0x64>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	89 f1       	breq	.+98     	; 0x2de <DIO_getPinValue+0x84>
 27c:	08 95       	ret
 27e:	89 b3       	in	r24, 0x19	; 25
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_getPinValue+0x2e>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_getPinValue+0x2a>
 28c:	80 ff       	sbrs	r24, 0
 28e:	04 c0       	rjmp	.+8      	; 0x298 <DIO_getPinValue+0x3e>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
 296:	08 95       	ret
 298:	fa 01       	movw	r30, r20
 29a:	10 82       	st	Z, r1
 29c:	08 95       	ret
 29e:	86 b3       	in	r24, 0x16	; 22
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_getPinValue+0x4e>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_getPinValue+0x4a>
 2ac:	80 ff       	sbrs	r24, 0
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <DIO_getPinValue+0x5e>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	fa 01       	movw	r30, r20
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret
 2b8:	fa 01       	movw	r30, r20
 2ba:	10 82       	st	Z, r1
 2bc:	08 95       	ret
 2be:	83 b3       	in	r24, 0x13	; 19
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_getPinValue+0x6e>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_getPinValue+0x6a>
 2cc:	80 ff       	sbrs	r24, 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <DIO_getPinValue+0x7e>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	fa 01       	movw	r30, r20
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret
 2d8:	fa 01       	movw	r30, r20
 2da:	10 82       	st	Z, r1
 2dc:	08 95       	ret
 2de:	80 b3       	in	r24, 0x10	; 16
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_getPinValue+0x8e>
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_getPinValue+0x8a>
 2ec:	80 ff       	sbrs	r24, 0
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <DIO_getPinValue+0x9e>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	fa 01       	movw	r30, r20
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret
 2f8:	fa 01       	movw	r30, r20
 2fa:	10 82       	st	Z, r1
 2fc:	08 95       	ret

000002fe <DIO_setInputPinResistence>:

}
	
void DIO_setInputPinResistence(u8 PortId,u8 PinId)
{
if((PortId<=3)&&(PinId<=7))
 2fe:	84 30       	cpi	r24, 0x04	; 4
 300:	a8 f5       	brcc	.+106    	; 0x36c <DIO_setInputPinResistence+0x6e>
 302:	68 30       	cpi	r22, 0x08	; 8
 304:	98 f5       	brcc	.+102    	; 0x36c <DIO_setInputPinResistence+0x6e>
{	
	switch(PortId)
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	89 f0       	breq	.+34     	; 0x32c <DIO_setInputPinResistence+0x2e>
 30a:	28 f0       	brcs	.+10     	; 0x316 <DIO_setInputPinResistence+0x18>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	c9 f0       	breq	.+50     	; 0x342 <DIO_setInputPinResistence+0x44>
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	11 f1       	breq	.+68     	; 0x358 <DIO_setInputPinResistence+0x5a>
 314:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA,PinId);
 316:	2b b3       	in	r18, 0x1b	; 27
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_setInputPinResistence+0x24>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_setInputPinResistence+0x20>
 326:	82 2b       	or	r24, r18
 328:	8b bb       	out	0x1b, r24	; 27
		break;
 32a:	08 95       	ret
		
		case DIO_PORTB:
		SET_BIT(PORTB,PinId);
 32c:	28 b3       	in	r18, 0x18	; 24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_setInputPinResistence+0x3a>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_setInputPinResistence+0x36>
 33c:	82 2b       	or	r24, r18
 33e:	88 bb       	out	0x18, r24	; 24
		break;
 340:	08 95       	ret
		
		case DIO_PORTC:
		SET_BIT(PORTC,PinId);
 342:	25 b3       	in	r18, 0x15	; 21
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_setInputPinResistence+0x50>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_setInputPinResistence+0x4c>
 352:	82 2b       	or	r24, r18
 354:	85 bb       	out	0x15, r24	; 21
		break;
 356:	08 95       	ret
				 
		case DIO_PORTD:
		SET_BIT(PORTD,PinId);
 358:	22 b3       	in	r18, 0x12	; 18
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_setInputPinResistence+0x66>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_setInputPinResistence+0x62>
 368:	82 2b       	or	r24, r18
 36a:	82 bb       	out	0x12, r24	; 18
 36c:	08 95       	ret

0000036e <KPD_getValue>:
	#include "KPD_config.h"
	#include "KPD_interface.h"
	

void KPD_getValue(u8* returnedValue)
{
 36e:	7f 92       	push	r7
 370:	8f 92       	push	r8
 372:	9f 92       	push	r9
 374:	af 92       	push	r10
 376:	bf 92       	push	r11
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	69 97       	sbiw	r28, 0x19	; 25
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
*returnedValue = KPD_NOT_PRESSED;  //if returnedValue remains KPD_NOT_PRESSED then no change is done
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18

u8 KPD_Chars[KPD_ROWS_NUM][KPD_COLS_NUM] = KPD_KEYS;
 39e:	20 e1       	ldi	r18, 0x10	; 16
 3a0:	e0 e6       	ldi	r30, 0x60	; 96
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	de 01       	movw	r26, r28
 3a6:	11 96       	adiw	r26, 0x01	; 1
 3a8:	01 90       	ld	r0, Z+
 3aa:	0d 92       	st	X+, r0
 3ac:	2a 95       	dec	r18
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <KPD_getValue+0x3a>
u8 colPins[KPD_COLS_NUM] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
 3b0:	19 8a       	std	Y+17, r1	; 0x11
 3b2:	35 e0       	ldi	r19, 0x05	; 5
 3b4:	3a 8b       	std	Y+18, r19	; 0x12
 3b6:	26 e0       	ldi	r18, 0x06	; 6
 3b8:	2b 8b       	std	Y+19, r18	; 0x13
 3ba:	47 e0       	ldi	r20, 0x07	; 7
 3bc:	4c 8b       	std	Y+20, r20	; 0x14
u8 rowPins[KPD_ROWS_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
 3be:	43 e0       	ldi	r20, 0x03	; 3
 3c0:	4d 8b       	std	Y+21, r20	; 0x15
 3c2:	44 e0       	ldi	r20, 0x04	; 4
 3c4:	4e 8b       	std	Y+22, r20	; 0x16
 3c6:	3f 8b       	std	Y+23, r19	; 0x17
 3c8:	28 8f       	std	Y+24, r18	; 0x18

if (returnedValue!=NULL)
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <KPD_getValue+0x62>
 3ce:	5f c0       	rjmp	.+190    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 3d0:	65 c0       	rjmp	.+202    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
for (column=0;column<KPD_COLS_NUM;column++)
{

for(i=0;i<KPD_COLS_NUM;i++){
	//Deactivate all columns
	DIO_setPinValue(KPD_COLS_PORT,colPins[i],DIO_PIN_HIGH);
 3d2:	e1 e1       	ldi	r30, 0x11	; 17
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	ec 0f       	add	r30, r28
 3d8:	fd 1f       	adc	r31, r29
 3da:	e1 0f       	add	r30, r17
 3dc:	f1 1d       	adc	r31, r1
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	60 81       	ld	r22, Z
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
u8 pinFlag=0;
					   									   
for (column=0;column<KPD_COLS_NUM;column++)
{

for(i=0;i<KPD_COLS_NUM;i++){
 3e8:	1f 5f       	subi	r17, 0xFF	; 255
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <KPD_getValue+0x80>
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	14 30       	cpi	r17, 0x04	; 4
 3f0:	80 f3       	brcs	.-32     	; 0x3d2 <KPD_getValue+0x64>
	//Deactivate all columns
	DIO_setPinValue(KPD_COLS_PORT,colPins[i],DIO_PIN_HIGH);
}

	//Activate current column
DIO_setPinValue(KPD_COLS_PORT,colPins[column],DIO_PIN_LOW);	
 3f2:	a9 2c       	mov	r10, r9
 3f4:	b1 2c       	mov	r11, r1
 3f6:	e1 e1       	ldi	r30, 0x11	; 17
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	ec 0f       	add	r30, r28
 3fc:	fd 1f       	adc	r31, r29
 3fe:	ea 0d       	add	r30, r10
 400:	fb 1d       	adc	r31, r11
 402:	80 80       	ld	r8, Z
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	68 2d       	mov	r22, r8
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	for (row=0;row<KPD_ROWS_NUM;row++)
 40e:	10 e0       	ldi	r17, 0x00	; 0
 410:	32 c0       	rjmp	.+100    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
	{
//Read current row
DIO_getPinValue(KPD_ROWS_PORT,rowPins[row],&pinValue);
 412:	c1 2e       	mov	r12, r17
 414:	d1 2c       	mov	r13, r1
 416:	e5 e1       	ldi	r30, 0x15	; 21
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	ec 0f       	add	r30, r28
 41c:	fd 1f       	adc	r31, r29
 41e:	ec 0d       	add	r30, r12
 420:	fd 1d       	adc	r31, r13
 422:	00 81       	ld	r16, Z
 424:	ae 01       	movw	r20, r28
 426:	47 5e       	subi	r20, 0xE7	; 231
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	60 2f       	mov	r22, r16
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
	if (pinValue == 0)
 432:	89 8d       	ldd	r24, Y+25	; 0x19
 434:	81 11       	cpse	r24, r1
 436:	1e c0       	rjmp	.+60     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	{
//Read current row and column ascii if pressed
		*returnedValue=KPD_Chars[row][column];
 438:	cc 0c       	add	r12, r12
 43a:	dd 1c       	adc	r13, r13
 43c:	cc 0c       	add	r12, r12
 43e:	dd 1c       	adc	r13, r13
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	8c 0f       	add	r24, r28
 446:	9d 1f       	adc	r25, r29
 448:	c8 0e       	add	r12, r24
 44a:	d9 1e       	adc	r13, r25
 44c:	f6 01       	movw	r30, r12
 44e:	ea 0d       	add	r30, r10
 450:	fb 1d       	adc	r31, r11
 452:	80 81       	ld	r24, Z
 454:	f7 01       	movw	r30, r14
 456:	80 83       	st	Z, r24
	    //as long as you hold the key the *while* will stop the algorithm from repeating
		while (pinValue == 0)
 458:	07 c0       	rjmp	.+14     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		{
		DIO_getPinValue(KPD_ROWS_PORT,rowPins[row],&pinValue);	
 45a:	ae 01       	movw	r20, r28
 45c:	47 5e       	subi	r20, 0xE7	; 231
 45e:	5f 4f       	sbci	r21, 0xFF	; 255
 460:	60 2f       	mov	r22, r16
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
	if (pinValue == 0)
	{
//Read current row and column ascii if pressed
		*returnedValue=KPD_Chars[row][column];
	    //as long as you hold the key the *while* will stop the algorithm from repeating
		while (pinValue == 0)
 468:	89 8d       	ldd	r24, Y+25	; 0x19
 46a:	88 23       	and	r24, r24
 46c:	b1 f3       	breq	.-20     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		{
		DIO_getPinValue(KPD_ROWS_PORT,rowPins[row],&pinValue);	
		}
		pinFlag=1;
 46e:	77 24       	eor	r7, r7
 470:	73 94       	inc	r7
 472:	03 c0       	rjmp	.+6      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	DIO_setPinValue(KPD_COLS_PORT,colPins[i],DIO_PIN_HIGH);
}

	//Activate current column
DIO_setPinValue(KPD_COLS_PORT,colPins[column],DIO_PIN_LOW);	
	for (row=0;row<KPD_ROWS_NUM;row++)
 474:	1f 5f       	subi	r17, 0xFF	; 255
 476:	14 30       	cpi	r17, 0x04	; 4
 478:	60 f2       	brcs	.-104    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		pinFlag=1;
		break;
	}
	}
//Deactivate current column
DIO_setPinValue(KPD_COLS_PORT,colPins[column],DIO_PIN_HIGH);
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	68 2d       	mov	r22, r8
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>

			if (pinFlag == 1)
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	7f 16       	cp	r7, r31
 488:	49 f0       	breq	.+18     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
{			   
u8 row,column,i;
u8 pinValue;	
u8 pinFlag=0;
					   									   
for (column=0;column<KPD_COLS_NUM;column++)
 48a:	93 94       	inc	r9
 48c:	03 c0       	rjmp	.+6      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 48e:	7c 01       	movw	r14, r24
 490:	71 2c       	mov	r7, r1
 492:	91 2c       	mov	r9, r1
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	89 15       	cp	r24, r9
 498:	08 f0       	brcs	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49a:	a8 cf       	rjmp	.-176    	; 0x3ec <KPD_getValue+0x7e>
				break;
			}
}	
}

}
 49c:	69 96       	adiw	r28, 0x19	; 25
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	9f 90       	pop	r9
 4be:	8f 90       	pop	r8
 4c0:	7f 90       	pop	r7
 4c2:	08 95       	ret

000004c4 <writeHalfPort>:
}



static void writeHalfPort(u8 value)
{
 4c4:	cf 93       	push	r28
 4c6:	c8 2f       	mov	r28, r24
if(1 == GET_BIT(value,0))
 4c8:	80 ff       	sbrs	r24, 0
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <writeHalfPort+0x14>
{
DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH);		
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	64 e0       	ldi	r22, 0x04	; 4
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <writeHalfPort+0x1e>
}else{
DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW);	
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	64 e0       	ldi	r22, 0x04	; 4
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
}
if(1 == GET_BIT(value,1))
 4e2:	c1 ff       	sbrs	r28, 1
 4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <writeHalfPort+0x2e>
{
DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH);		
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	65 e0       	ldi	r22, 0x05	; 5
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <writeHalfPort+0x38>
}else{                           
DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW);	
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	65 e0       	ldi	r22, 0x05	; 5
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
}
if(1 == GET_BIT(value,2))
 4fc:	c2 ff       	sbrs	r28, 2
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <writeHalfPort+0x48>
{
DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH);		
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	66 e0       	ldi	r22, 0x06	; 6
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 50a:	05 c0       	rjmp	.+10     	; 0x516 <writeHalfPort+0x52>
}else{
DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW);	
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	66 e0       	ldi	r22, 0x06	; 6
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
}
if(1 == GET_BIT(value,3))
 516:	c3 ff       	sbrs	r28, 3
 518:	06 c0       	rjmp	.+12     	; 0x526 <writeHalfPort+0x62>
{
DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH);		
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	67 e0       	ldi	r22, 0x07	; 7
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 524:	05 c0       	rjmp	.+10     	; 0x530 <writeHalfPort+0x6c>
}else{
DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW);	
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	67 e0       	ldi	r22, 0x07	; 7
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
}
		
}
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <LCD_setPinDirections>:

		/*MAIN Functions*/
void LCD_setPinDirections(void)
{
/* LCD Data Pins Direction */
DIO_setPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	64 e0       	ldi	r22, 0x04	; 4
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
DIO_setPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	65 e0       	ldi	r22, 0x05	; 5
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
DIO_setPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	66 e0       	ldi	r22, 0x06	; 6
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
DIO_setPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	67 e0       	ldi	r22, 0x07	; 7
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
/* LCD Control Pins Direction */
DIO_setPinDirection(LCD_E_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
DIO_setPinDirection(LCD_E_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	62 e0       	ldi	r22, 0x02	; 2
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
DIO_setPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	63 e0       	ldi	r22, 0x03	; 3
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 57a:	08 95       	ret

0000057c <LCD_sendCmnd>:
LCD_sendCmnd(0b00000110);

}

void LCD_sendCmnd(u8 cmnd)
{
 57c:	cf 93       	push	r28
 57e:	c8 2f       	mov	r28, r24
	//set Rs pin to 0 (command)
DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	//set Rw pin to 0 (write)
DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	62 e0       	ldi	r22, 0x02	; 2
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);

#elif LCD_MODE == LCD_4_BIT_MODE

	//write most Seg 4 bits of command
writeHalfPort(cmnd>>4);	
 594:	8c 2f       	mov	r24, r28
 596:	82 95       	swap	r24
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeHalfPort>
	//enable pulse H=>L
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	63 e0       	ldi	r22, 0x03	; 3
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a8:	8f e9       	ldi	r24, 0x9F	; 159
 5aa:	9f e0       	ldi	r25, 0x0F	; 15
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_sendCmnd+0x30>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <LCD_sendCmnd+0x36>
 5b2:	00 00       	nop
_delay_ms(1);
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	63 e0       	ldi	r22, 0x03	; 3
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	//write least seg 4 bits command
writeHalfPort(cmnd);
 5be:	8c 2f       	mov	r24, r28
 5c0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeHalfPort>
	//enable pulse H=>L	
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 5ce:	8f e9       	ldi	r24, 0x9F	; 159
 5d0:	9f e0       	ldi	r25, 0x0F	; 15
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_sendCmnd+0x56>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_sendCmnd+0x5c>
 5d8:	00 00       	nop
_delay_ms(1);
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	63 e0       	ldi	r22, 0x03	; 3
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>

	#endif
}
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <LCD_init>:
 5e8:	2f e7       	ldi	r18, 0x7F	; 127
 5ea:	85 eb       	ldi	r24, 0xB5	; 181
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	21 50       	subi	r18, 0x01	; 1
 5f0:	80 40       	sbci	r24, 0x00	; 0
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <LCD_init+0x6>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <LCD_init+0x10>
 5f8:	00 00       	nop
void LCD_init(void)
{
_delay_ms(35);
#if LCD_MODE == LCD_4_BIT_MODE
	//set Rs pin to 0 (command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	//set Rw pin to 0 (write)
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	62 e0       	ldi	r22, 0x02	; 2
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>

	writeHalfPort(0b0010);
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeHalfPort>
	//enable pulse H=>L
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	63 e0       	ldi	r22, 0x03	; 3
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 61e:	8f e9       	ldi	r24, 0x9F	; 159
 620:	9f e0       	ldi	r25, 0x0F	; 15
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <LCD_init+0x3a>
 626:	00 c0       	rjmp	.+0      	; 0x628 <LCD_init+0x40>
 628:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	63 e0       	ldi	r22, 0x03	; 3
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
LCD_sendCmnd(0b00101000);
 634:	88 e2       	ldi	r24, 0x28	; 40
 636:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63a:	90 ef       	ldi	r25, 0xF0	; 240
 63c:	9a 95       	dec	r25
 63e:	f1 f7       	brne	.-4      	; 0x63c <LCD_init+0x54>
#elif LCD_MODE == LCD_8_BIT_MODE
LCD_sendCmnd(0b00111000);
#endif
_delay_us(45);
//display on,blink on, cursor on
LCD_sendCmnd(0b00001111);
 640:	8f e0       	ldi	r24, 0x0F	; 15
 642:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_sendCmnd>
 646:	20 ef       	ldi	r18, 0xF0	; 240
 648:	2a 95       	dec	r18
 64a:	f1 f7       	brne	.-4      	; 0x648 <LCD_init+0x60>
_delay_us(45);
// clear display
LCD_sendCmnd(0b00000001);
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 652:	8f e3       	ldi	r24, 0x3F	; 63
 654:	9f e1       	ldi	r25, 0x1F	; 31
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <LCD_init+0x6e>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_init+0x74>
 65c:	00 00       	nop
_delay_ms(2);
//set 
LCD_sendCmnd(0b00000110);
 65e:	86 e0       	ldi	r24, 0x06	; 6
 660:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_sendCmnd>
 664:	08 95       	ret

00000666 <LCD_sendChar>:

	#endif
}

void LCD_sendChar(u8 data)
{
 666:	cf 93       	push	r28
 668:	c8 2f       	mov	r28, r24
	//set Rs pin to 1 (data)
DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	//set Rw pin to 0 (write)
DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	62 e0       	ldi	r22, 0x02	; 2
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);

	#elif LCD_MODE == LCD_4_BIT_MODE	
	//write most seg 4 bits of data
writeHalfPort(data>>4);	
 67e:	8c 2f       	mov	r24, r28
 680:	82 95       	swap	r24
 682:	8f 70       	andi	r24, 0x0F	; 15
 684:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeHalfPort>
	//enable pulse H=>L
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	63 e0       	ldi	r22, 0x03	; 3
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 692:	8f e9       	ldi	r24, 0x9F	; 159
 694:	9f e0       	ldi	r25, 0x0F	; 15
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <LCD_sendChar+0x30>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <LCD_sendChar+0x36>
 69c:	00 00       	nop
_delay_ms(1);
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
 69e:	40 e0       	ldi	r20, 0x00	; 0
 6a0:	63 e0       	ldi	r22, 0x03	; 3
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
	//write least seg 4 bits of data
writeHalfPort(data);
 6a8:	8c 2f       	mov	r24, r28
 6aa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <writeHalfPort>
	//enable pulse H=>L	
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 6ae:	41 e0       	ldi	r20, 0x01	; 1
 6b0:	63 e0       	ldi	r22, 0x03	; 3
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 6b8:	8f e9       	ldi	r24, 0x9F	; 159
 6ba:	9f e0       	ldi	r25, 0x0F	; 15
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <LCD_sendChar+0x56>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <LCD_sendChar+0x5c>
 6c2:	00 00       	nop
_delay_ms(1);
DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	63 e0       	ldi	r22, 0x03	; 3
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>

	#endif	
}
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <main>:
#include "KPD_config.h"
#include "LCD_interface.h"
#include "LCD_config.h"

int main(void)
{
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	1f 92       	push	r1
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
  LCD_setPinDirections();
 6dc:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_setPinDirections>
  LCD_init();
 6e0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_init>
  
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL0_PIN,DIO_PIN_OUTPUT);
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL1_PIN,DIO_PIN_OUTPUT);
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	65 e0       	ldi	r22, 0x05	; 5
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL2_PIN,DIO_PIN_OUTPUT);
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	66 e0       	ldi	r22, 0x06	; 6
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_COLS_PORT,KPD_COL3_PIN,DIO_PIN_OUTPUT);
 702:	41 e0       	ldi	r20, 0x01	; 1
 704:	67 e0       	ldi	r22, 0x07	; 7
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,DIO_PIN_INPUT);
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	63 e0       	ldi	r22, 0x03	; 3
 710:	82 e0       	ldi	r24, 0x02	; 2
 712:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,DIO_PIN_INPUT);
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	64 e0       	ldi	r22, 0x04	; 4
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,DIO_PIN_INPUT);
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	65 e0       	ldi	r22, 0x05	; 5
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,DIO_PIN_INPUT);
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	66 e0       	ldi	r22, 0x06	; 6
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	
	DIO_setInputPinResistence(KPD_ROWS_PORT,KPD_ROW0_PIN);
 734:	63 e0       	ldi	r22, 0x03	; 3
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistence>
	DIO_setInputPinResistence(KPD_ROWS_PORT,KPD_ROW1_PIN);
 73c:	64 e0       	ldi	r22, 0x04	; 4
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistence>
	DIO_setInputPinResistence(KPD_ROWS_PORT,KPD_ROW2_PIN);
 744:	65 e0       	ldi	r22, 0x05	; 5
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistence>
	DIO_setInputPinResistence(KPD_ROWS_PORT,KPD_ROW3_PIN);
 74c:	66 e0       	ldi	r22, 0x06	; 6
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_setInputPinResistence>

	u8 kpdkey;
    while (1) 
    {
		
		KPD_getValue(&kpdkey);
 754:	ce 01       	movw	r24, r28
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	0e 94 b7 01 	call	0x36e	; 0x36e <KPD_getValue>
		if(KPD_NOT_PRESSED != kpdkey)
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	8f 3f       	cpi	r24, 0xFF	; 255
 760:	c9 f3       	breq	.-14     	; 0x754 <main+0x82>
		{
			LCD_sendChar(kpdkey);
 762:	0e 94 33 03 	call	0x666	; 0x666 <LCD_sendChar>
 766:	f6 cf       	rjmp	.-20     	; 0x754 <main+0x82>

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
