
AMIT_KIT_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000508  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000508  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013af  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000775  00000000  00000000  00001aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ad  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c7e  00000000  00000000  00003321  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  7a:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:


/*Pin Apis*/
void DIO_setPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
if((PortId<=3)&&(PinId<=7)&&((PinDirection== DIO_PIN_INPUT)||(PinDirection==DIO_PIN_OUTPUT)))
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
{
switch(PortId)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
{
	case DIO_PORTA:
	if(1==PinDirection)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
	{
	SET_BIT(DDRA,PinId);	
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
	}else{
	CLR_BIT(DDRA,PinId);	
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(1==PinDirection)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
	{
	SET_BIT(DDRB,PinId);	
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
	}else{
	CLR_BIT(DDRB,PinId);	
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(1==PinDirection)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
	{
	SET_BIT(DDRC,PinId);	
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
	}else{
	CLR_BIT(DDRC,PinId);	
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(1==PinDirection)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
	{
	SET_BIT(DDRD,PinId);	
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
	}else{
	CLR_BIT(DDRD,PinId);	
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
}


void DIO_setPinValue	(u8 PortId,u8 PinId,u8 PinValue)
{
if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_LOW)||(PinValue==DIO_PIN_HIGH)))
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
{
switch(PortId)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==PinValue)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
	{
	SET_BIT(PORTA,PinId);	
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
	}else{
	CLR_BIT(PORTA,PinId);	
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
	{
	SET_BIT(PORTB,PinId);	
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
	}else{
	CLR_BIT(PORTB,PinId);	
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(DIO_PIN_HIGH==PinValue)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
	{
	SET_BIT(PORTC,PinId);	
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
	}else{
	CLR_BIT(PORTC,PinId);	
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(DIO_PIN_HIGH==PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
	{
	SET_BIT(PORTD,PinId);	
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
	}else{
	CLR_BIT(PORTD,PinId);	
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <writeHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
 25e:	80 ff       	sbrs	r24, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <writeHalfPort+0x14>
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <writeHalfPort+0x1e>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 278:	c1 ff       	sbrs	r28, 1
 27a:	06 c0       	rjmp	.+12     	; 0x288 <writeHalfPort+0x2e>
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 286:	05 c0       	rjmp	.+10     	; 0x292 <writeHalfPort+0x38>
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 292:	c2 ff       	sbrs	r28, 2
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <writeHalfPort+0x48>
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	66 e0       	ldi	r22, 0x06	; 6
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <writeHalfPort+0x52>
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	66 e0       	ldi	r22, 0x06	; 6
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2ac:	c3 ff       	sbrs	r28, 3
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <writeHalfPort+0x62>
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <writeHalfPort+0x6c>
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_setPinDirections>:
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	64 e0       	ldi	r22, 0x04	; 4
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	65 e0       	ldi	r22, 0x05	; 5
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	66 e0       	ldi	r22, 0x06	; 6
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 310:	08 95       	ret

00000312 <LCD_sendCmnd>:
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 32a:	8c 2f       	mov	r24, r28
 32c:	82 95       	swap	r24
 32e:	8f 70       	andi	r24, 0x0F	; 15
 330:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 33e:	8f ec       	ldi	r24, 0xCF	; 207
 340:	97 e0       	ldi	r25, 0x07	; 7
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_sendCmnd+0x30>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_sendCmnd+0x36>
 348:	00 00       	nop
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	63 e0       	ldi	r22, 0x03	; 3
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 354:	8c 2f       	mov	r24, r28
 356:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 364:	8f ec       	ldi	r24, 0xCF	; 207
 366:	97 e0       	ldi	r25, 0x07	; 7
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_sendCmnd+0x56>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_sendCmnd+0x5c>
 36e:	00 00       	nop
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <LCD_init>:
 37e:	2f eb       	ldi	r18, 0xBF	; 191
 380:	8a ed       	ldi	r24, 0xDA	; 218
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <LCD_init+0x6>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_init+0x10>
 38e:	00 00       	nop
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3b4:	8f ec       	ldi	r24, 0xCF	; 207
 3b6:	97 e0       	ldi	r25, 0x07	; 7
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCD_init+0x3a>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_init+0x40>
 3be:	00 00       	nop
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	63 e0       	ldi	r22, 0x03	; 3
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3ca:	88 e2       	ldi	r24, 0x28	; 40
 3cc:	0e 94 89 01 	call	0x312	; 0x312 <LCD_sendCmnd>
 3d0:	98 e7       	ldi	r25, 0x78	; 120
 3d2:	9a 95       	dec	r25
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_init+0x54>
 3d6:	8f e0       	ldi	r24, 0x0F	; 15
 3d8:	0e 94 89 01 	call	0x312	; 0x312 <LCD_sendCmnd>
 3dc:	28 e7       	ldi	r18, 0x78	; 120
 3de:	2a 95       	dec	r18
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_init+0x60>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 89 01 	call	0x312	; 0x312 <LCD_sendCmnd>
 3e8:	8f e9       	ldi	r24, 0x9F	; 159
 3ea:	9f e0       	ldi	r25, 0x0F	; 15
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_init+0x6e>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_init+0x74>
 3f2:	00 00       	nop
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	0e 94 89 01 	call	0x312	; 0x312 <LCD_sendCmnd>
 3fa:	08 95       	ret

000003fc <LCD_sendChar>:
 3fc:	cf 93       	push	r28
 3fe:	c8 2f       	mov	r28, r24
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 414:	8c 2f       	mov	r24, r28
 416:	82 95       	swap	r24
 418:	8f 70       	andi	r24, 0x0F	; 15
 41a:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	63 e0       	ldi	r22, 0x03	; 3
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 428:	8f ec       	ldi	r24, 0xCF	; 207
 42a:	97 e0       	ldi	r25, 0x07	; 7
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 43e:	8c 2f       	mov	r24, r28
 440:	0e 94 2d 01 	call	0x25a	; 0x25a <writeHalfPort>
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 44e:	8f ec       	ldi	r24, 0xCF	; 207
 450:	97 e0       	ldi	r25, 0x07	; 7
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	63 e0       	ldi	r22, 0x03	; 3
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <LCD_typeString>:
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	71 f4       	brne	.+28     	; 0x48e <LCD_typeString+0x26>
 472:	15 c0       	rjmp	.+42     	; 0x49e <LCD_typeString+0x36>
 474:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_sendChar>
 478:	2f e3       	ldi	r18, 0x3F	; 63
 47a:	86 e9       	ldi	r24, 0x96	; 150
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <LCD_typeString+0x16>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_typeString+0x20>
 488:	00 00       	nop
 48a:	cf 5f       	subi	r28, 0xFF	; 255
 48c:	02 c0       	rjmp	.+4      	; 0x492 <LCD_typeString+0x2a>
 48e:	8c 01       	movw	r16, r24
 490:	c0 e0       	ldi	r28, 0x00	; 0
 492:	f8 01       	movw	r30, r16
 494:	ec 0f       	add	r30, r28
 496:	f1 1d       	adc	r31, r1
 498:	80 81       	ld	r24, Z
 49a:	81 11       	cpse	r24, r1
 49c:	eb cf       	rjmp	.-42     	; 0x474 <LCD_typeString+0xc>
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	08 95       	ret

000004a6 <LCD_clear>:
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 89 01 	call	0x312	; 0x312 <LCD_sendCmnd>
 4ac:	8f e9       	ldi	r24, 0x9F	; 159
 4ae:	9f e0       	ldi	r25, 0x0F	; 15
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCD_clear+0xa>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_clear+0x10>
 4b6:	00 00       	nop
 4b8:	08 95       	ret

000004ba <LCD_goToSpecificPosition>:
	}
}

void LCD_goToSpecificPosition(u8 lineNumber,u8 position)
{
	if(lineNumber == LCD_LINE_ONE)
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	39 f4       	brne	.+14     	; 0x4cc <LCD_goToSpecificPosition+0x12>
	{
	if (position<16)
 4be:	60 31       	cpi	r22, 0x10	; 16
 4c0:	68 f4       	brcc	.+26     	; 0x4dc <LCD_goToSpecificPosition+0x22>
	{
	LCD_sendCmnd(0x80 + position);	
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	86 0f       	add	r24, r22
 4c6:	0e 94 89 01 	call	0x312	; 0x312 <LCD_sendCmnd>
 4ca:	08 95       	ret
	}
		
	}else if (lineNumber == LCD_LINE_TWO){
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	31 f4       	brne	.+12     	; 0x4dc <LCD_goToSpecificPosition+0x22>
	if (position<16)
 4d0:	60 31       	cpi	r22, 0x10	; 16
 4d2:	20 f4       	brcc	.+8      	; 0x4dc <LCD_goToSpecificPosition+0x22>
	{
	LCD_sendCmnd(0xC0 + position);		
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	86 0f       	add	r24, r22
 4d8:	0e 94 89 01 	call	0x312	; 0x312 <LCD_sendCmnd>
 4dc:	08 95       	ret

000004de <main>:
#include "LCD_interface.h"
#include "LCD_config.h"

int main(void)
{
  LCD_setPinDirections();
 4de:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_setPinDirections>
  LCD_init();
 4e2:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_init>
  LCD_clear();	
 4e6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_clear>


LCD_typeString("Learn In Depth");
 4ea:	80 e6       	ldi	r24, 0x60	; 96
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 34 02 	call	0x468	; 0x468 <LCD_typeString>
LCD_goToSpecificPosition(LCD_LINE_TWO,0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_goToSpecificPosition>
LCD_typeString("~Mohamed Nabil");
 4fa:	8f e6       	ldi	r24, 0x6F	; 111
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 34 02 	call	0x468	; 0x468 <LCD_typeString>
 502:	ff cf       	rjmp	.-2      	; 0x502 <main+0x24>

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
