
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e58  08000e58  00010e60  2**0
                  CONTENTS
  4 .ARM          00000000  08000e58  08000e58  00010e60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e58  08000e60  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e58  08000e58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e5c  08000e5c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e60  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e60  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033ad  00000000  00000000  00010e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000854  00000000  00000000  00014236  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a7c  00000000  00000000  00014a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  00015508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  000156b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000a9d  00000000  00000000  00015820  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c59  00000000  00000000  000162bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009656  00000000  00000000  00017f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002156c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000574  00000000  00000000  000215e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e14 	.word	0x08000e14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e14 	.word	0x08000e14

08000170 <delay_ms>:
static void writeHalfPort(uint8_t value);


/*MAIN Functions*/

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_setPinDirections>:




void LCD_setPinDirections(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0

#endif

	//common pins between 2 modes 

	PinCfg.GPIO_PinNumber = LCD_D4_PIN;
 80001ae:	2310      	movs	r3, #16
 80001b0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001b2:	2304      	movs	r3, #4
 80001b4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_D4_PORT, &PinCfg);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	4826      	ldr	r0, [pc, #152]	; (8000258 <LCD_setPinDirections+0xb0>)
 80001c0:	f000 fce1 	bl	8000b86 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = LCD_D5_PIN;
 80001c4:	2320      	movs	r3, #32
 80001c6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2304      	movs	r3, #4
 80001ca:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_D5_PORT, &PinCfg);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4820      	ldr	r0, [pc, #128]	; (8000258 <LCD_setPinDirections+0xb0>)
 80001d6:	f000 fcd6 	bl	8000b86 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = LCD_D6_PIN;
 80001da:	2340      	movs	r3, #64	; 0x40
 80001dc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2304      	movs	r3, #4
 80001e0:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e2:	2301      	movs	r3, #1
 80001e4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_D6_PORT, &PinCfg);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	481b      	ldr	r0, [pc, #108]	; (8000258 <LCD_setPinDirections+0xb0>)
 80001ec:	f000 fccb 	bl	8000b86 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = LCD_D7_PIN;
 80001f0:	2380      	movs	r3, #128	; 0x80
 80001f2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2304      	movs	r3, #4
 80001f6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f8:	2301      	movs	r3, #1
 80001fa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_D7_PORT, &PinCfg);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4815      	ldr	r0, [pc, #84]	; (8000258 <LCD_setPinDirections+0xb0>)
 8000202:	f000 fcc0 	bl	8000b86 <MCAL_GPIO_Init>


	/* LCD Control Pins Direction */
	PinCfg.GPIO_PinNumber = LCD_RS_PIN;
 8000206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800020a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	2304      	movs	r3, #4
 800020e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000210:	2301      	movs	r3, #1
 8000212:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4619      	mov	r1, r3
 8000218:	480f      	ldr	r0, [pc, #60]	; (8000258 <LCD_setPinDirections+0xb0>)
 800021a:	f000 fcb4 	bl	8000b86 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = LCD_RW_PIN;
 800021e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000222:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000224:	2304      	movs	r3, #4
 8000226:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000228:	2301      	movs	r3, #1
 800022a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	4619      	mov	r1, r3
 8000230:	4809      	ldr	r0, [pc, #36]	; (8000258 <LCD_setPinDirections+0xb0>)
 8000232:	f000 fca8 	bl	8000b86 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = LCD_E_PIN;
 8000236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800023c:	2304      	movs	r3, #4
 800023e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000240:	2301      	movs	r3, #1
 8000242:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <LCD_setPinDirections+0xb0>)
 800024a:	f000 fc9c 	bl	8000b86 <MCAL_GPIO_Init>

}		
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010800 	.word	0x40010800

0800025c <LCD_init>:

void LCD_init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	delay_ms(35);
 8000260:	2023      	movs	r0, #35	; 0x23
 8000262:	f7ff ff85 	bl	8000170 <delay_ms>
#if LCD_MODE == LCD_4_BIT_MODE
	//set Rs pin to 0 (command)
	MCAL_GPIO_WritePin(LCD_RS_PORT,LCD_RS_PIN,GPIO_PIN_LOW);
 8000266:	2200      	movs	r2, #0
 8000268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026c:	4818      	ldr	r0, [pc, #96]	; (80002d0 <LCD_init+0x74>)
 800026e:	f000 fd0b 	bl	8000c88 <MCAL_GPIO_WritePin>
	//set Rw pin to 0 (write)
	MCAL_GPIO_WritePin(LCD_RW_PORT,LCD_RW_PIN,GPIO_PIN_LOW);
 8000272:	2200      	movs	r2, #0
 8000274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000278:	4815      	ldr	r0, [pc, #84]	; (80002d0 <LCD_init+0x74>)
 800027a:	f000 fd05 	bl	8000c88 <MCAL_GPIO_WritePin>

	writeHalfPort(0b0010);
 800027e:	2002      	movs	r0, #2
 8000280:	f000 f8a8 	bl	80003d4 <writeHalfPort>
	//enable pulse H=>L
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_HIGH);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <LCD_init+0x74>)
 800028c:	f000 fcfc 	bl	8000c88 <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f7ff ff6d 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_LOW);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LCD_init+0x74>)
 800029e:	f000 fcf3 	bl	8000c88 <MCAL_GPIO_WritePin>
	LCD_sendCmnd(0b00101000);
 80002a2:	2028      	movs	r0, #40	; 0x28
 80002a4:	f000 f816 	bl	80002d4 <LCD_sendCmnd>
#elif LCD_MODE == LCD_8_BIT_MODE
	LCD_sendCmnd(0b00111000);
#endif
	delay_ms(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ff61 	bl	8000170 <delay_ms>
	//display on,blink on, cursor on
	LCD_sendCmnd(0b00001111);
 80002ae:	200f      	movs	r0, #15
 80002b0:	f000 f810 	bl	80002d4 <LCD_sendCmnd>
	delay_ms(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ff5b 	bl	8000170 <delay_ms>
	// clear display
	LCD_sendCmnd(0b00000001);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f000 f80a 	bl	80002d4 <LCD_sendCmnd>
	delay_ms(2);
 80002c0:	2002      	movs	r0, #2
 80002c2:	f7ff ff55 	bl	8000170 <delay_ms>
	//set
	LCD_sendCmnd(0b00000110);
 80002c6:	2006      	movs	r0, #6
 80002c8:	f000 f804 	bl	80002d4 <LCD_sendCmnd>

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40010800 	.word	0x40010800

080002d4 <LCD_sendCmnd>:

void LCD_sendCmnd(uint8_t cmnd)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	//set Rs pin to 0 (command)
	MCAL_GPIO_WritePin(LCD_RS_PORT,LCD_RS_PIN,GPIO_PIN_LOW);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e4:	481a      	ldr	r0, [pc, #104]	; (8000350 <LCD_sendCmnd+0x7c>)
 80002e6:	f000 fccf 	bl	8000c88 <MCAL_GPIO_WritePin>
	//set Rw pin to 0 (write)
	MCAL_GPIO_WritePin(LCD_RW_PORT,LCD_RW_PIN,GPIO_PIN_LOW);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f0:	4817      	ldr	r0, [pc, #92]	; (8000350 <LCD_sendCmnd+0x7c>)
 80002f2:	f000 fcc9 	bl	8000c88 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_LOW);

#elif LCD_MODE == LCD_4_BIT_MODE

	//write most Seg 4 bits of command
	writeHalfPort(cmnd>>4);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	091b      	lsrs	r3, r3, #4
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f869 	bl	80003d4 <writeHalfPort>
	//enable pulse H=>L
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_HIGH);
 8000302:	2201      	movs	r2, #1
 8000304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000308:	4811      	ldr	r0, [pc, #68]	; (8000350 <LCD_sendCmnd+0x7c>)
 800030a:	f000 fcbd 	bl	8000c88 <MCAL_GPIO_WritePin>
	delay_ms(1);
 800030e:	2001      	movs	r0, #1
 8000310:	f7ff ff2e 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_LOW);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	480d      	ldr	r0, [pc, #52]	; (8000350 <LCD_sendCmnd+0x7c>)
 800031c:	f000 fcb4 	bl	8000c88 <MCAL_GPIO_WritePin>
	//write least seg 4 bits command
	writeHalfPort(cmnd);
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f856 	bl	80003d4 <writeHalfPort>
	//enable pulse H=>L	
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_HIGH);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	4808      	ldr	r0, [pc, #32]	; (8000350 <LCD_sendCmnd+0x7c>)
 8000330:	f000 fcaa 	bl	8000c88 <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000334:	2001      	movs	r0, #1
 8000336:	f7ff ff1b 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_LOW);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <LCD_sendCmnd+0x7c>)
 8000342:	f000 fca1 	bl	8000c88 <MCAL_GPIO_WritePin>

#endif
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010800 	.word	0x40010800

08000354 <LCD_sendChar>:

void LCD_sendChar(uint8_t data)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
	//set Rs pin to 1 (data)
	MCAL_GPIO_WritePin(LCD_RS_PORT,LCD_RS_PIN,GPIO_PIN_HIGH);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000364:	481a      	ldr	r0, [pc, #104]	; (80003d0 <LCD_sendChar+0x7c>)
 8000366:	f000 fc8f 	bl	8000c88 <MCAL_GPIO_WritePin>
	//set Rw pin to 0 (write)
	MCAL_GPIO_WritePin(LCD_RW_PORT,LCD_RW_PIN,GPIO_PIN_LOW);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000370:	4817      	ldr	r0, [pc, #92]	; (80003d0 <LCD_sendChar+0x7c>)
 8000372:	f000 fc89 	bl	8000c88 <MCAL_GPIO_WritePin>
	delay_ms(1);
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_LOW);

#elif LCD_MODE == LCD_4_BIT_MODE
	//write most seg 4 bits of data
	writeHalfPort(data>>4);
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	091b      	lsrs	r3, r3, #4
 800037a:	b2db      	uxtb	r3, r3
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f829 	bl	80003d4 <writeHalfPort>
	//enable pulse H=>L
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_HIGH);
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000388:	4811      	ldr	r0, [pc, #68]	; (80003d0 <LCD_sendChar+0x7c>)
 800038a:	f000 fc7d 	bl	8000c88 <MCAL_GPIO_WritePin>
	delay_ms(1);
 800038e:	2001      	movs	r0, #1
 8000390:	f7ff feee 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_LOW);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800039a:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LCD_sendChar+0x7c>)
 800039c:	f000 fc74 	bl	8000c88 <MCAL_GPIO_WritePin>
	//write least seg 4 bits of data
	writeHalfPort(data);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f816 	bl	80003d4 <writeHalfPort>
	//enable pulse H=>L	
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_HIGH);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ae:	4808      	ldr	r0, [pc, #32]	; (80003d0 <LCD_sendChar+0x7c>)
 80003b0:	f000 fc6a 	bl	8000c88 <MCAL_GPIO_WritePin>
	delay_ms(1);
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff fedb 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT,LCD_E_PIN,GPIO_PIN_LOW);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <LCD_sendChar+0x7c>)
 80003c2:	f000 fc61 	bl	8000c88 <MCAL_GPIO_WritePin>

#endif
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40010800 	.word	0x40010800

080003d4 <writeHalfPort>:



static void writeHalfPort(uint8_t value)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	if(1 == GET_BIT(value,0))
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	f003 0301 	and.w	r3, r3, #1
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d005      	beq.n	80003f4 <writeHalfPort+0x20>
	{
		MCAL_GPIO_WritePin(LCD_D4_PORT,LCD_D4_PIN,GPIO_PIN_HIGH);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2110      	movs	r1, #16
 80003ec:	4821      	ldr	r0, [pc, #132]	; (8000474 <writeHalfPort+0xa0>)
 80003ee:	f000 fc4b 	bl	8000c88 <MCAL_GPIO_WritePin>
 80003f2:	e004      	b.n	80003fe <writeHalfPort+0x2a>
	}else{
		MCAL_GPIO_WritePin(LCD_D4_PORT,LCD_D4_PIN,GPIO_PIN_LOW);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481e      	ldr	r0, [pc, #120]	; (8000474 <writeHalfPort+0xa0>)
 80003fa:	f000 fc45 	bl	8000c88 <MCAL_GPIO_WritePin>
	}
	if(1 == GET_BIT(value,1))
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	085b      	lsrs	r3, r3, #1
 8000402:	b2db      	uxtb	r3, r3
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d005      	beq.n	8000418 <writeHalfPort+0x44>
	{
		MCAL_GPIO_WritePin(LCD_D5_PORT,LCD_D5_PIN,GPIO_PIN_HIGH);
 800040c:	2201      	movs	r2, #1
 800040e:	2120      	movs	r1, #32
 8000410:	4818      	ldr	r0, [pc, #96]	; (8000474 <writeHalfPort+0xa0>)
 8000412:	f000 fc39 	bl	8000c88 <MCAL_GPIO_WritePin>
 8000416:	e004      	b.n	8000422 <writeHalfPort+0x4e>
	}else{
		MCAL_GPIO_WritePin(LCD_D5_PORT,LCD_D5_PIN,GPIO_PIN_LOW);
 8000418:	2200      	movs	r2, #0
 800041a:	2120      	movs	r1, #32
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <writeHalfPort+0xa0>)
 800041e:	f000 fc33 	bl	8000c88 <MCAL_GPIO_WritePin>
	}
	if(1 == GET_BIT(value,2))
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	089b      	lsrs	r3, r3, #2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	2b00      	cmp	r3, #0
 800042e:	d005      	beq.n	800043c <writeHalfPort+0x68>
	{
		MCAL_GPIO_WritePin(LCD_D6_PORT,LCD_D6_PIN,GPIO_PIN_HIGH);
 8000430:	2201      	movs	r2, #1
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <writeHalfPort+0xa0>)
 8000436:	f000 fc27 	bl	8000c88 <MCAL_GPIO_WritePin>
 800043a:	e004      	b.n	8000446 <writeHalfPort+0x72>
	}else{
		MCAL_GPIO_WritePin(LCD_D6_PORT,LCD_D6_PIN,GPIO_PIN_LOW);
 800043c:	2200      	movs	r2, #0
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <writeHalfPort+0xa0>)
 8000442:	f000 fc21 	bl	8000c88 <MCAL_GPIO_WritePin>
	}
	if(1 == GET_BIT(value,3))
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	2b00      	cmp	r3, #0
 8000452:	d005      	beq.n	8000460 <writeHalfPort+0x8c>
	{
		MCAL_GPIO_WritePin(LCD_D7_PORT,LCD_D7_PIN,GPIO_PIN_HIGH);
 8000454:	2201      	movs	r2, #1
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <writeHalfPort+0xa0>)
 800045a:	f000 fc15 	bl	8000c88 <MCAL_GPIO_WritePin>
	}else{
		MCAL_GPIO_WritePin(LCD_D7_PORT,LCD_D7_PIN,GPIO_PIN_LOW);
	}

}
 800045e:	e004      	b.n	800046a <writeHalfPort+0x96>
		MCAL_GPIO_WritePin(LCD_D7_PORT,LCD_D7_PIN,GPIO_PIN_LOW);
 8000460:	2200      	movs	r2, #0
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	4803      	ldr	r0, [pc, #12]	; (8000474 <writeHalfPort+0xa0>)
 8000466:	f000 fc0f 	bl	8000c88 <MCAL_GPIO_WritePin>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010800 	.word	0x40010800

08000478 <LCD_typeString>:
	}

}

void LCD_typeString(char* data)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if (data != NULL)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d015      	beq.n	80004b2 <LCD_typeString+0x3a>
	{
		uint8_t count=0;
 8000486:	2300      	movs	r3, #0
 8000488:	73fb      	strb	r3, [r7, #15]
		while (data[count] != '\0')
 800048a:	e00c      	b.n	80004a6 <LCD_typeString+0x2e>
		{
			LCD_sendChar(data[count]);
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff5d 	bl	8000354 <LCD_sendChar>
			delay_ms(65);
 800049a:	2041      	movs	r0, #65	; 0x41
 800049c:	f7ff fe68 	bl	8000170 <delay_ms>
			count++;
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	3301      	adds	r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
		while (data[count] != '\0')
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4413      	add	r3, r2
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1ec      	bne.n	800048c <LCD_typeString+0x14>
		}

	}

}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LCD_clear>:
		}while (Local_reversed != 1);
	} 
}

void LCD_clear(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
	// Clear display
	LCD_sendCmnd(0b00000001);
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ff08 	bl	80002d4 <LCD_sendCmnd>
	delay_ms(2);
 80004c4:	2002      	movs	r0, #2
 80004c6:	f7ff fe53 	bl	8000170 <delay_ms>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <LCD_goToSpecificPosition>:

	}
}

void LCD_goToSpecificPosition(uint8_t lineNumber,uint8_t position)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	4603      	mov	r3, r0
 80004d6:	460a      	mov	r2, r1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	4613      	mov	r3, r2
 80004dc:	71bb      	strb	r3, [r7, #6]
	if(lineNumber == LCD_LINE_ONE)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d109      	bne.n	80004f8 <LCD_goToSpecificPosition+0x2a>
	{
		if (position<16)
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	d812      	bhi.n	8000510 <LCD_goToSpecificPosition+0x42>
		{
			LCD_sendCmnd(0x80 + position);
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	3b80      	subs	r3, #128	; 0x80
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff feef 	bl	80002d4 <LCD_sendCmnd>
		if (position<16)
		{
			LCD_sendCmnd(0xC0 + position);
		}
	}
}
 80004f6:	e00b      	b.n	8000510 <LCD_goToSpecificPosition+0x42>
	}else if (lineNumber == LCD_LINE_TWO){
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	d108      	bne.n	8000510 <LCD_goToSpecificPosition+0x42>
		if (position<16)
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d805      	bhi.n	8000510 <LCD_goToSpecificPosition+0x42>
			LCD_sendCmnd(0xC0 + position);
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	3b40      	subs	r3, #64	; 0x40
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fee2 	bl	80002d4 <LCD_sendCmnd>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Enable_NVIC>:
 * 								Generic Functions
 * =============================================================================
 */

void Enable_NVIC(uint16_t IRQ)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	2b0f      	cmp	r3, #15
 8000526:	d854      	bhi.n	80005d2 <Enable_NVIC+0xba>
 8000528:	a201      	add	r2, pc, #4	; (adr r2, 8000530 <Enable_NVIC+0x18>)
 800052a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052e:	bf00      	nop
 8000530:	08000571 	.word	0x08000571
 8000534:	0800057f 	.word	0x0800057f
 8000538:	0800058d 	.word	0x0800058d
 800053c:	0800059b 	.word	0x0800059b
 8000540:	080005a9 	.word	0x080005a9
 8000544:	080005b7 	.word	0x080005b7
 8000548:	080005b7 	.word	0x080005b7
 800054c:	080005b7 	.word	0x080005b7
 8000550:	080005b7 	.word	0x080005b7
 8000554:	080005b7 	.word	0x080005b7
 8000558:	080005c5 	.word	0x080005c5
 800055c:	080005c5 	.word	0x080005c5
 8000560:	080005c5 	.word	0x080005c5
 8000564:	080005c5 	.word	0x080005c5
 8000568:	080005c5 	.word	0x080005c5
 800056c:	080005c5 	.word	0x080005c5
	{
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE();
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <Enable_NVIC+0xc4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <Enable_NVIC+0xc4>)
 8000576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057a:	6013      	str	r3, [r2, #0]
		break;
 800057c:	e029      	b.n	80005d2 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_ENABLE();
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <Enable_NVIC+0xc4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a16      	ldr	r2, [pc, #88]	; (80005dc <Enable_NVIC+0xc4>)
 8000584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000588:	6013      	str	r3, [r2, #0]
		break;
 800058a:	e022      	b.n	80005d2 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_ENABLE();
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <Enable_NVIC+0xc4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a12      	ldr	r2, [pc, #72]	; (80005dc <Enable_NVIC+0xc4>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
		break;
 8000598:	e01b      	b.n	80005d2 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_ENABLE();
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <Enable_NVIC+0xc4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <Enable_NVIC+0xc4>)
 80005a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a4:	6013      	str	r3, [r2, #0]
		break;
 80005a6:	e014      	b.n	80005d2 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_ENABLE();
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <Enable_NVIC+0xc4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <Enable_NVIC+0xc4>)
 80005ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b2:	6013      	str	r3, [r2, #0]
		break;
 80005b4:	e00d      	b.n	80005d2 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <Enable_NVIC+0xc4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <Enable_NVIC+0xc4>)
 80005bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005c0:	6013      	str	r3, [r2, #0]
		break;
 80005c2:	e006      	b.n	80005d2 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE();
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <Enable_NVIC+0xc8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <Enable_NVIC+0xc8>)
 80005ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ce:	6013      	str	r3, [r2, #0]
		break;
 80005d0:	bf00      	nop

	}

}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100
 80005e0:	e000e104 	.word	0xe000e104

080005e4 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d854      	bhi.n	800069e <Disable_NVIC+0xba>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <Disable_NVIC+0x18>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	0800063d 	.word	0x0800063d
 8000600:	0800064b 	.word	0x0800064b
 8000604:	08000659 	.word	0x08000659
 8000608:	08000667 	.word	0x08000667
 800060c:	08000675 	.word	0x08000675
 8000610:	08000683 	.word	0x08000683
 8000614:	08000683 	.word	0x08000683
 8000618:	08000683 	.word	0x08000683
 800061c:	08000683 	.word	0x08000683
 8000620:	08000683 	.word	0x08000683
 8000624:	08000691 	.word	0x08000691
 8000628:	08000691 	.word	0x08000691
 800062c:	08000691 	.word	0x08000691
 8000630:	08000691 	.word	0x08000691
 8000634:	08000691 	.word	0x08000691
 8000638:	08000691 	.word	0x08000691
	{
	case 0:
		NVIC_IRQ6_EXTI0_DISABLE();
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <Disable_NVIC+0xc4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <Disable_NVIC+0xc4>)
 8000642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000646:	6013      	str	r3, [r2, #0]
		break;
 8000648:	e029      	b.n	800069e <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_DISABLE();
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <Disable_NVIC+0xc4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <Disable_NVIC+0xc4>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6013      	str	r3, [r2, #0]
		break;
 8000656:	e022      	b.n	800069e <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_DISABLE();
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <Disable_NVIC+0xc4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <Disable_NVIC+0xc4>)
 800065e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000662:	6013      	str	r3, [r2, #0]
		break;
 8000664:	e01b      	b.n	800069e <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_DISABLE();
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <Disable_NVIC+0xc4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <Disable_NVIC+0xc4>)
 800066c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000670:	6013      	str	r3, [r2, #0]
		break;
 8000672:	e014      	b.n	800069e <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_DISABLE();
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <Disable_NVIC+0xc4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <Disable_NVIC+0xc4>)
 800067a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800067e:	6013      	str	r3, [r2, #0]
		break;
 8000680:	e00d      	b.n	800069e <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_DISABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <Disable_NVIC+0xc4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <Disable_NVIC+0xc4>)
 8000688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800068c:	6013      	str	r3, [r2, #0]
		break;
 800068e:	e006      	b.n	800069e <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_DISABLE();
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <Disable_NVIC+0xc8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <Disable_NVIC+0xc8>)
 8000696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069a:	6013      	str	r3, [r2, #0]
		break;
 800069c:	bf00      	nop

	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	e000e180 	.word	0xe000e180
 80006ac:	e000e184 	.word	0xe000e184

080006b0 <Update_EXTI>:


void Update_EXTI(EXTI_PinConfig_t* EXTI_Config){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

	//1- Configure GPIO PIN to be AF INPUT [Floating INPUT]
	GPIO_PinConfig_t Pincfg;
	Pincfg.GPIO_PinNumber = EXTI_Config->EXTI_Pin.GPIO_Pin;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	891b      	ldrh	r3, [r3, #8]
 80006bc:	813b      	strh	r3, [r7, #8]
	Pincfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80006be:	2308      	movs	r3, #8
 80006c0:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port, &Pincfg);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f107 0208 	add.w	r2, r7, #8
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fa5a 	bl	8000b86 <MCAL_GPIO_Init>
	//-------------------------------------------
	//2-Update AFIO to route EXTI line between GPIO_Port A,B,C,D

	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_Pin.EXTI_InputLineNumber/4 ;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	b29b      	uxth	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Pin_Shift = (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber % 4) * 4 ;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 0303 	and.w	r3, r3, #3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	73bb      	strb	r3, [r7, #14]

	//clear the four bits first
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Pin_Shift);
 80006ec:	4a5f      	ldr	r2, [pc, #380]	; (800086c <Update_EXTI+0x1bc>)
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	3302      	adds	r3, #2
 80006f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	210f      	movs	r1, #15
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	495a      	ldr	r1, [pc, #360]	; (800086c <Update_EXTI+0x1bc>)
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4002      	ands	r2, r0
 8000708:	3302      	adds	r3, #2
 800070a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Choose GPIO_Port to be mapped into EXTI pin

	AFIO->EXTICR[AFIO_EXTICR_Index] |= ( (AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) & 0x0F ) << AFIO_EXTICR_Pin_Shift) ;
 800070e:	4a57      	ldr	r2, [pc, #348]	; (800086c <Update_EXTI+0x1bc>)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3302      	adds	r3, #2
 8000714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4954      	ldr	r1, [pc, #336]	; (8000870 <Update_EXTI+0x1c0>)
 800071e:	428b      	cmp	r3, r1
 8000720:	d016      	beq.n	8000750 <Update_EXTI+0xa0>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	4953      	ldr	r1, [pc, #332]	; (8000874 <Update_EXTI+0x1c4>)
 8000728:	428b      	cmp	r3, r1
 800072a:	d00f      	beq.n	800074c <Update_EXTI+0x9c>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4951      	ldr	r1, [pc, #324]	; (8000878 <Update_EXTI+0x1c8>)
 8000732:	428b      	cmp	r3, r1
 8000734:	d008      	beq.n	8000748 <Update_EXTI+0x98>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	4950      	ldr	r1, [pc, #320]	; (800087c <Update_EXTI+0x1cc>)
 800073c:	428b      	cmp	r3, r1
 800073e:	d101      	bne.n	8000744 <Update_EXTI+0x94>
 8000740:	2303      	movs	r3, #3
 8000742:	e006      	b.n	8000752 <Update_EXTI+0xa2>
 8000744:	2300      	movs	r3, #0
 8000746:	e004      	b.n	8000752 <Update_EXTI+0xa2>
 8000748:	2302      	movs	r3, #2
 800074a:	e002      	b.n	8000752 <Update_EXTI+0xa2>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <Update_EXTI+0xa2>
 8000750:	2300      	movs	r3, #0
 8000752:	7bb9      	ldrb	r1, [r7, #14]
 8000754:	408b      	lsls	r3, r1
 8000756:	4618      	mov	r0, r3
 8000758:	4944      	ldr	r1, [pc, #272]	; (800086c <Update_EXTI+0x1bc>)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	4302      	orrs	r2, r0
 800075e:	3302      	adds	r3, #2
 8000760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//-------------------------------------------
	//3-choose Trigger_Case for EXTI Pin

	//First we clear Trigger selection bits
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000764:	4b46      	ldr	r3, [pc, #280]	; (8000880 <Update_EXTI+0x1d0>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	8812      	ldrh	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	43d2      	mvns	r2, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a42      	ldr	r2, [pc, #264]	; (8000880 <Update_EXTI+0x1d0>)
 8000778:	400b      	ands	r3, r1
 800077a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800077c:	4b40      	ldr	r3, [pc, #256]	; (8000880 <Update_EXTI+0x1d0>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	4611      	mov	r1, r2
 8000786:	2201      	movs	r2, #1
 8000788:	408a      	lsls	r2, r1
 800078a:	43d2      	mvns	r2, r2
 800078c:	4611      	mov	r1, r2
 800078e:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <Update_EXTI+0x1d0>)
 8000790:	400b      	ands	r3, r1
 8000792:	60d3      	str	r3, [r2, #12]

	//Then we choose Trigger_Case
	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7b1b      	ldrb	r3, [r3, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10b      	bne.n	80007b4 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <Update_EXTI+0x1d0>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	8812      	ldrh	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a34      	ldr	r2, [pc, #208]	; (8000880 <Update_EXTI+0x1d0>)
 80007ae:	430b      	orrs	r3, r1
 80007b0:	6093      	str	r3, [r2, #8]
 80007b2:	e029      	b.n	8000808 <Update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7b1b      	ldrb	r3, [r3, #12]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10b      	bne.n	80007d4 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80007bc:	4b30      	ldr	r3, [pc, #192]	; (8000880 <Update_EXTI+0x1d0>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	8812      	ldrh	r2, [r2, #0]
 80007c4:	4611      	mov	r1, r2
 80007c6:	2201      	movs	r2, #1
 80007c8:	408a      	lsls	r2, r1
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <Update_EXTI+0x1d0>)
 80007ce:	430b      	orrs	r3, r1
 80007d0:	60d3      	str	r3, [r2, #12]
 80007d2:	e019      	b.n	8000808 <Update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING_OR_FALLING)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7b1b      	ldrb	r3, [r3, #12]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d115      	bne.n	8000808 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <Update_EXTI+0x1d0>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	4611      	mov	r1, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	408a      	lsls	r2, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <Update_EXTI+0x1d0>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <Update_EXTI+0x1d0>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	8812      	ldrh	r2, [r2, #0]
 80007fa:	4611      	mov	r1, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	408a      	lsls	r2, r1
 8000800:	4611      	mov	r1, r2
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <Update_EXTI+0x1d0>)
 8000804:	430b      	orrs	r3, r1
 8000806:	60d3      	str	r3, [r2, #12]

	}

	//-------------------------------------------
	//4-locate Interrupt handle Function called in main if IRQ is done
	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <Update_EXTI+0x1d4>)
 8000814:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//-------------------------------------------
	//5-Enable/Disable IRQ for EXTI Pin
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7b5b      	ldrb	r3, [r3, #13]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d110      	bne.n	8000842 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <Update_EXTI+0x1d0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	4611      	mov	r1, r2
 800082a:	2201      	movs	r2, #1
 800082c:	408a      	lsls	r2, r1
 800082e:	4611      	mov	r1, r2
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <Update_EXTI+0x1d0>)
 8000832:	430b      	orrs	r3, r1
 8000834:	6013      	str	r3, [r2, #0]

		//Enable NVIC IRQ PIN
		Enable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fe6c 	bl	8000518 <Enable_NVIC>
	}

	//-------------------------------------------


}
 8000840:	e010      	b.n	8000864 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <Update_EXTI+0x1d0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	8812      	ldrh	r2, [r2, #0]
 800084a:	4611      	mov	r1, r2
 800084c:	2201      	movs	r2, #1
 800084e:	408a      	lsls	r2, r1
 8000850:	43d2      	mvns	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <Update_EXTI+0x1d0>)
 8000856:	400b      	ands	r3, r1
 8000858:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fec0 	bl	80005e4 <Disable_NVIC>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40010000 	.word	0x40010000
 8000870:	40010800 	.word	0x40010800
 8000874:	40010c00 	.word	0x40010c00
 8000878:	40011000 	.word	0x40011000
 800087c:	40011400 	.word	0x40011400
 8000880:	40010400 	.word	0x40010400
 8000884:	2000001c 	.word	0x2000001c

08000888 <MCAL_EXTI_GPIO_Init>:
 * @Return Value	- NONE
 * Note				- PinConfig is only set by @ref EXTI_define & @ref EXTI_Trigger_define & @ref EXTI_IRQ_define
 * 					  it is also mandatory to enable RCC clock for AFIO and corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* PinConfig)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	Update_EXTI(PinConfig);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff0d 	bl	80006b0 <Update_EXTI>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <EXTI0_IRQHandler>:
 * 								ISR Functions
 * =============================================================================
 */

void EXTI0_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<0);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <EXTI0_IRQHandler+0x1c>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <EXTI0_IRQHandler+0x1c>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[0]();
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <EXTI0_IRQHandler+0x20>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4798      	blx	r3

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010400 	.word	0x40010400
 80008c0:	2000001c 	.word	0x2000001c

080008c4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<1);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <EXTI1_IRQHandler+0x1c>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <EXTI1_IRQHandler+0x1c>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[1]();
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <EXTI1_IRQHandler+0x20>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4798      	blx	r3

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40010400 	.word	0x40010400
 80008e4:	2000001c 	.word	0x2000001c

080008e8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<2);
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <EXTI2_IRQHandler+0x1c>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <EXTI2_IRQHandler+0x1c>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[2]();
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <EXTI2_IRQHandler+0x20>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4798      	blx	r3

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010400 	.word	0x40010400
 8000908:	2000001c 	.word	0x2000001c

0800090c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<3);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <EXTI3_IRQHandler+0x1c>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <EXTI3_IRQHandler+0x1c>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[3]();
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <EXTI3_IRQHandler+0x20>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4798      	blx	r3

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010400 	.word	0x40010400
 800092c:	2000001c 	.word	0x2000001c

08000930 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	//Clear IRQ bit in Pending Register (EXTI_PR)
	EXTI->PR |= (1 <<4);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <EXTI4_IRQHandler+0x1c>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <EXTI4_IRQHandler+0x1c>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6153      	str	r3, [r2, #20]

	//Call the IRQ callback Function
	GP_IRQ_CallBack[4]();
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <EXTI4_IRQHandler+0x20>)
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	4798      	blx	r3

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010400 	.word	0x40010400
 8000950:	2000001c 	.word	0x2000001c

08000954 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 5)) { EXTI->PR |= (1 << 5); GP_IRQ_CallBack[5](); }
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 0320 	and.w	r3, r3, #32
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <EXTI9_5_IRQHandler+0x22>
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	6153      	str	r3, [r2, #20]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4798      	blx	r3
	if(EXTI->PR & (1 << 6)) { EXTI->PR |= (1 << 6); GP_IRQ_CallBack[6](); }
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	2b00      	cmp	r3, #0
 8000980:	d008      	beq.n	8000994 <EXTI9_5_IRQHandler+0x40>
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4798      	blx	r3
	if(EXTI->PR & (1 << 7)) { EXTI->PR |= (1 << 7); GP_IRQ_CallBack[7](); }
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099c:	2b00      	cmp	r3, #0
 800099e:	d008      	beq.n	80009b2 <EXTI9_5_IRQHandler+0x5e>
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009aa:	6153      	str	r3, [r2, #20]
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4798      	blx	r3
	if(EXTI->PR & (1 << 8)) { EXTI->PR |= (1 << 8); GP_IRQ_CallBack[8](); }
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <EXTI9_5_IRQHandler+0x7c>
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c8:	6153      	str	r3, [r2, #20]
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	4798      	blx	r3
	if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1 << 9); GP_IRQ_CallBack[9](); }
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d008      	beq.n	80009ee <EXTI9_5_IRQHandler+0x9a>
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6153      	str	r3, [r2, #20]
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	4798      	blx	r3
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010400 	.word	0x40010400
 80009f8:	2000001c 	.word	0x2000001c

080009fc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 10)) { EXTI->PR |= (1 << 10); GP_IRQ_CallBack[10](); }
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d008      	beq.n	8000a1e <EXTI15_10_IRQHandler+0x22>
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6153      	str	r3, [r2, #20]
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	4798      	blx	r3
	if(EXTI->PR & (1 << 11)) { EXTI->PR |= (1 << 11); GP_IRQ_CallBack[11](); }
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d008      	beq.n	8000a3c <EXTI15_10_IRQHandler+0x40>
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3a:	4798      	blx	r3
	if(EXTI->PR & (1 << 12)) { EXTI->PR |= (1 << 12); GP_IRQ_CallBack[12](); }
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d008      	beq.n	8000a5a <EXTI15_10_IRQHandler+0x5e>
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a52:	6153      	str	r3, [r2, #20]
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4798      	blx	r3
	if(EXTI->PR & (1 << 13)) { EXTI->PR |= (1 << 13); GP_IRQ_CallBack[13](); }
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d008      	beq.n	8000a78 <EXTI15_10_IRQHandler+0x7c>
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a76:	4798      	blx	r3
	if(EXTI->PR & (1 << 14)) { EXTI->PR |= (1 << 14); GP_IRQ_CallBack[14](); }
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d008      	beq.n	8000a96 <EXTI15_10_IRQHandler+0x9a>
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6153      	str	r3, [r2, #20]
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a94:	4798      	blx	r3
	if(EXTI->PR & (1 << 15)) { EXTI->PR |= (1 << 15); GP_IRQ_CallBack[15](); }
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d008      	beq.n	8000ab4 <EXTI15_10_IRQHandler+0xb8>
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b03      	ldr	r3, [pc, #12]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab2:	4798      	blx	r3
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40010400 	.word	0x40010400
 8000abc:	2000001c 	.word	0x2000001c

08000ac0 <Get_CRLH_Position>:
 * 								Generic Functions
 * =============================================================================
 */


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber)
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2b80      	cmp	r3, #128	; 0x80
 8000ace:	d042      	beq.n	8000b56 <Get_CRLH_Position+0x96>
 8000ad0:	2b80      	cmp	r3, #128	; 0x80
 8000ad2:	dc11      	bgt.n	8000af8 <Get_CRLH_Position+0x38>
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d036      	beq.n	8000b46 <Get_CRLH_Position+0x86>
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	dc06      	bgt.n	8000aea <Get_CRLH_Position+0x2a>
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d02e      	beq.n	8000b3e <Get_CRLH_Position+0x7e>
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d02e      	beq.n	8000b42 <Get_CRLH_Position+0x82>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d028      	beq.n	8000b3a <Get_CRLH_Position+0x7a>
 8000ae8:	e047      	b.n	8000b7a <Get_CRLH_Position+0xba>
 8000aea:	2b20      	cmp	r3, #32
 8000aec:	d02f      	beq.n	8000b4e <Get_CRLH_Position+0x8e>
 8000aee:	2b40      	cmp	r3, #64	; 0x40
 8000af0:	d02f      	beq.n	8000b52 <Get_CRLH_Position+0x92>
 8000af2:	2b10      	cmp	r3, #16
 8000af4:	d029      	beq.n	8000b4a <Get_CRLH_Position+0x8a>
 8000af6:	e040      	b.n	8000b7a <Get_CRLH_Position+0xba>
 8000af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000afc:	d033      	beq.n	8000b66 <Get_CRLH_Position+0xa6>
 8000afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b02:	dc09      	bgt.n	8000b18 <Get_CRLH_Position+0x58>
 8000b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b08:	d029      	beq.n	8000b5e <Get_CRLH_Position+0x9e>
 8000b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b0e:	d028      	beq.n	8000b62 <Get_CRLH_Position+0xa2>
 8000b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b14:	d021      	beq.n	8000b5a <Get_CRLH_Position+0x9a>
 8000b16:	e030      	b.n	8000b7a <Get_CRLH_Position+0xba>
 8000b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b1c:	d027      	beq.n	8000b6e <Get_CRLH_Position+0xae>
 8000b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b22:	dc03      	bgt.n	8000b2c <Get_CRLH_Position+0x6c>
 8000b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b28:	d01f      	beq.n	8000b6a <Get_CRLH_Position+0xaa>
 8000b2a:	e026      	b.n	8000b7a <Get_CRLH_Position+0xba>
 8000b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b30:	d01f      	beq.n	8000b72 <Get_CRLH_Position+0xb2>
 8000b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b36:	d01e      	beq.n	8000b76 <Get_CRLH_Position+0xb6>
 8000b38:	e01f      	b.n	8000b7a <Get_CRLH_Position+0xba>
	{
	//CRL Pins
	case GPIO_PIN_0:
		return 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e01e      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	e01c      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000b42:	2308      	movs	r3, #8
 8000b44:	e01a      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000b46:	230c      	movs	r3, #12
 8000b48:	e018      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	e016      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000b4e:	2314      	movs	r3, #20
 8000b50:	e014      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000b52:	2318      	movs	r3, #24
 8000b54:	e012      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000b56:	231c      	movs	r3, #28
 8000b58:	e010      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;

		//CRH Pins
	case GPIO_PIN_8:
		return 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e00e      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	e00c      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000b62:	2308      	movs	r3, #8
 8000b64:	e00a      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000b66:	230c      	movs	r3, #12
 8000b68:	e008      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	e006      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000b6e:	2314      	movs	r3, #20
 8000b70:	e004      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000b72:	2318      	movs	r3, #24
 8000b74:	e002      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000b76:	231c      	movs	r3, #28
 8000b78:	e000      	b.n	8000b7c <Get_CRLH_Position+0xbc>
		break;
	}

	return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <MCAL_GPIO_Init>:
 * Note				- STM32F103x8 MCU has GPIO A,B,C,D,E Modules
 *					  but LQFP48 Package has only GPIO A,B,a part of C/D
 *					  exported as external PINs from the MCU
 */
void MCAL_GPIO_Init(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig )
{
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) (x=A..G) FOR PINs 0 >> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G)	FOR PINs 8 >> 16

	volatile uint32_t* configRegister = (PinConfig->GPIO_PinNumber <GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	2bff      	cmp	r3, #255	; 0xff
 8000b96:	d801      	bhi.n	8000b9c <MCAL_GPIO_Init+0x16>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	e001      	b.n	8000ba0 <MCAL_GPIO_Init+0x1a>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	60fb      	str	r3, [r7, #12]
	volatile uint8_t pin_config =0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72fb      	strb	r3, [r7, #11]


	//clear CNFx[1:0] MODEx[1:0] [4 bits]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff88 	bl	8000ac0 <Get_CRLH_Position>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	4093      	lsls	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	601a      	str	r2, [r3, #0]

	//check if selected mode is OUTPUT
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD)|| (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP)|| (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) )
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	789b      	ldrb	r3, [r3, #2]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d00b      	beq.n	8000be4 <MCAL_GPIO_Init+0x5e>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	789b      	ldrb	r3, [r3, #2]
 8000bd0:	2b05      	cmp	r3, #5
 8000bd2:	d007      	beq.n	8000be4 <MCAL_GPIO_Init+0x5e>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d003      	beq.n	8000be4 <MCAL_GPIO_Init+0x5e>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	d10f      	bne.n	8000c04 <MCAL_GPIO_Init+0x7e>
	{
		pin_config = ( (( (PinConfig->GPIO_Mode - 4) << 2 ) | (PinConfig->GPIO_Output_Speed)) & 0x0f) ;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	789b      	ldrb	r3, [r3, #2]
 8000be8:	3b04      	subs	r3, #4
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	b25a      	sxtb	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	78db      	ldrb	r3, [r3, #3]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	72fb      	strb	r3, [r7, #11]
 8000c02:	e02d      	b.n	8000c60 <MCAL_GPIO_Init+0xda>

	}
	else{ 	//configure pins if selected mode is INTPUT MODEx[1:0]=0x00


		if( (PinConfig->GPIO_Mode == GPIO_MODE_ANALOG) || (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO) ){
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	789b      	ldrb	r3, [r3, #2]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <MCAL_GPIO_Init+0x8e>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	789b      	ldrb	r3, [r3, #2]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d108      	bne.n	8000c26 <MCAL_GPIO_Init+0xa0>

			pin_config = ( (( (PinConfig->GPIO_Mode ) << 2 ) | 0x00 ) & 0x0f) ;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	72fb      	strb	r3, [r7, #11]
 8000c24:	e01c      	b.n	8000c60 <MCAL_GPIO_Init+0xda>

		}else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT){ //considered as floating input
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d102      	bne.n	8000c34 <MCAL_GPIO_Init+0xae>

			pin_config = ( (( (GPIO_MODE_INPUT_FLO) << 2 ) | 0x00 ) & 0x0f) ;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	72fb      	strb	r3, [r7, #11]
 8000c32:	e015      	b.n	8000c60 <MCAL_GPIO_Init+0xda>

		}else{

			pin_config = ( (( (GPIO_MODE_INPUT_PU) << 2 ) | 0x00 ) & 0x0f) ;
 8000c34:	2308      	movs	r3, #8
 8000c36:	72fb      	strb	r3, [r7, #11]

			//to select between PullUp and PullDown modes
			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU){
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d107      	bne.n	8000c50 <MCAL_GPIO_Init+0xca>

				//table 20.Port bit configuration table : PxODR -> 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	8812      	ldrh	r2, [r2, #0]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	e007      	b.n	8000c60 <MCAL_GPIO_Init+0xda>

			}else{
				//table 20.Port bit configuration table : PxODR -> 1
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	8812      	ldrh	r2, [r2, #0]
 8000c58:	43d2      	mvns	r2, r2
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60da      	str	r2, [r3, #12]


	}

	//Set configRegister [CRL/CRH] PINs to the requires values
	(*configRegister) |= ( (pin_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461c      	mov	r4, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff28 	bl	8000ac0 <Get_CRLH_Position>
 8000c70:	4603      	mov	r3, r0
 8000c72:	fa04 f203 	lsl.w	r2, r4, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <MCAL_GPIO_WritePin>:
 * @Parameter [in]	- PinNumber: choose pin Number according to @ref GPIO_PINS_define
 * @Parameter [in]	- value: PIN value to be written
 * @Return Value	- NONE
 * Note				- NONE
 */
void MCAL_GPIO_WritePin(GPIO_t* GPIOx,uint16_t PinNumber,uint8_t value){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]

	//We can use ODR and Also we can use BSRR to reset and BRR to set pin value
	//i'm using BSRR to reset and BRR to set pin values

	if(value == (uint8_t)GPIO_PIN_HIGH){
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d103      	bne.n	8000ca6 <MCAL_GPIO_WritePin+0x1e>
		/*  Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	These bits are write-only and can be accessed in Word mode only.
	0: No action on the corresponding ODRx bit
	1: Set the corresponding ODRx bit              */

		GPIOx->BSRR = (uint32_t)PinNumber;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]

		GPIOx->BRR = (uint32_t)PinNumber;
	}


}
 8000ca4:	e002      	b.n	8000cac <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	615a      	str	r2, [r3, #20]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <clock_init>:

uint32_t IRQ_Flag ;

extern void delay_ms(uint32_t time);

void clock_init(void){
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	RCC_AFIO_CLK_EN();
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <clock_init+0x30>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <clock_init+0x30>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <clock_init+0x30>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <clock_init+0x30>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <clock_init+0x30>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <clock_init+0x30>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6193      	str	r3, [r2, #24]


}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <EXTI9_CallBack+0x28>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
	LCD_typeString("IRQ EXTI9 Has");
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <EXTI9_CallBack+0x2c>)
 8000cf8:	f7ff fbbe 	bl	8000478 <LCD_typeString>
	LCD_goToSpecificPosition(LCD_LINE_TWO, 0);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f7ff fbe5 	bl	80004ce <LCD_goToSpecificPosition>
	LCD_typeString("Happened --|__");
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <EXTI9_CallBack+0x30>)
 8000d06:	f7ff fbb7 	bl	8000478 <LCD_typeString>

	delay_ms(250);
 8000d0a:	20fa      	movs	r0, #250	; 0xfa
 8000d0c:	f7ff fa30 	bl	8000170 <delay_ms>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000005c 	.word	0x2000005c
 8000d18:	08000e2c 	.word	0x08000e2c
 8000d1c:	08000e3c 	.word	0x08000e3c

08000d20 <main>:


int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
	//Initializations
	clock_init();
 8000d26:	f7ff ffc7 	bl	8000cb8 <clock_init>
	LCD_setPinDirections();
 8000d2a:	f7ff fa3d 	bl	80001a8 <LCD_setPinDirections>
	LCD_init();
 8000d2e:	f7ff fa95 	bl	800025c <LCD_init>


	EXTI_PinConfig_t PINCONFIG;

	PINCONFIG.EXTI_Pin = EXTI9PB9;
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <main+0x4c>)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PINCONFIG.IRQ_EN = EXTI_IRQ_ENABLE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	747b      	strb	r3, [r7, #17]
	PINCONFIG.P_IRQ_CallBack = EXTI9_CallBack;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <main+0x50>)
 8000d42:	617b      	str	r3, [r7, #20]
	PINCONFIG.Trigger_Case = EXTI_Trigger_FALLING;
 8000d44:	2301      	movs	r3, #1
 8000d46:	743b      	strb	r3, [r7, #16]

	MCAL_EXTI_GPIO_Init(&PINCONFIG);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fd9c 	bl	8000888 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <main+0x54>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

	while(1)
	{

		if(IRQ_Flag == 1)
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <main+0x54>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d1fb      	bne.n	8000d56 <main+0x36>
		{
			LCD_clear();
 8000d5e:	f7ff fbac 	bl	80004ba <LCD_clear>
			IRQ_Flag = 0;
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <main+0x54>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag == 1)
 8000d68:	e7f5      	b.n	8000d56 <main+0x36>
 8000d6a:	bf00      	nop
 8000d6c:	08000e4c 	.word	0x08000e4c
 8000d70:	08000ced 	.word	0x08000ced
 8000d74:	2000005c 	.word	0x2000005c

08000d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000da6:	f000 f811 	bl	8000dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff ffb9 	bl	8000d20 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   r0, =_estack
 8000db0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dbc:	08000e60 	.word	0x08000e60
  ldr r2, =_sbss
 8000dc0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dc4:	20000060 	.word	0x20000060

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <__libc_init_array>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	2500      	movs	r5, #0
 8000dd0:	4e0c      	ldr	r6, [pc, #48]	; (8000e04 <__libc_init_array+0x38>)
 8000dd2:	4c0d      	ldr	r4, [pc, #52]	; (8000e08 <__libc_init_array+0x3c>)
 8000dd4:	1ba4      	subs	r4, r4, r6
 8000dd6:	10a4      	asrs	r4, r4, #2
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	d109      	bne.n	8000df0 <__libc_init_array+0x24>
 8000ddc:	f000 f81a 	bl	8000e14 <_init>
 8000de0:	2500      	movs	r5, #0
 8000de2:	4e0a      	ldr	r6, [pc, #40]	; (8000e0c <__libc_init_array+0x40>)
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <__libc_init_array+0x44>)
 8000de6:	1ba4      	subs	r4, r4, r6
 8000de8:	10a4      	asrs	r4, r4, #2
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d105      	bne.n	8000dfa <__libc_init_array+0x2e>
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000df4:	4798      	blx	r3
 8000df6:	3501      	adds	r5, #1
 8000df8:	e7ee      	b.n	8000dd8 <__libc_init_array+0xc>
 8000dfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dfe:	4798      	blx	r3
 8000e00:	3501      	adds	r5, #1
 8000e02:	e7f2      	b.n	8000dea <__libc_init_array+0x1e>
 8000e04:	08000e58 	.word	0x08000e58
 8000e08:	08000e58 	.word	0x08000e58
 8000e0c:	08000e58 	.word	0x08000e58
 8000e10:	08000e5c 	.word	0x08000e5c

08000e14 <_init>:
 8000e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e16:	bf00      	nop
 8000e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1a:	bc08      	pop	{r3}
 8000e1c:	469e      	mov	lr, r3
 8000e1e:	4770      	bx	lr

08000e20 <_fini>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr
