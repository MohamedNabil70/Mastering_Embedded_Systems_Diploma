
Task_1_LED_Train.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b1  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ba  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 39 00 	call	0x72	; 0x72 <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
}

void DIO_init(void){
	
	//Port B select all pins mode (OUTPUT)
	DDRB = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
  70:	08 95       	ret

00000072 <main>:
//main
int main(void)
{
    s8 i;
	
	DIO_init();
  72:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
	//PROGRAM INFINITE LOOP
    while(1) 
    {
		
		//Turn ON all LEDS sequentially
		for(i=0;i<8;i++){
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	15 c0       	rjmp	.+42     	; 0xa4 <main+0x32>
		SET_BIT(PORTB,i);
  7a:	38 b3       	in	r19, 0x18	; 24
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	02 2e       	mov	r0, r18
  82:	02 c0       	rjmp	.+4      	; 0x88 <main+0x16>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <main+0x12>
  8c:	83 2b       	or	r24, r19
  8e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	3f ef       	ldi	r19, 0xFF	; 255
  92:	81 ee       	ldi	r24, 0xE1	; 225
  94:	94 e0       	ldi	r25, 0x04	; 4
  96:	31 50       	subi	r19, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x24>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x2e>
  a0:	00 00       	nop
	//PROGRAM INFINITE LOOP
    while(1) 
    {
		
		//Turn ON all LEDS sequentially
		for(i=0;i<8;i++){
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	28 30       	cpi	r18, 0x08	; 8
  a6:	4c f3       	brlt	.-46     	; 0x7a <main+0x8>
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	16 c0       	rjmp	.+44     	; 0xd8 <main+0x66>
		_delay_ms(200);
		}
			
		//Turn OFF all LEDS sequentially	
		for(i=7;i>=0;i--){
		CLR_BIT(PORTB,i);
  ac:	38 b3       	in	r19, 0x18	; 24
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x48>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x44>
  be:	80 95       	com	r24
  c0:	83 23       	and	r24, r19
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	3f ef       	ldi	r19, 0xFF	; 255
  c6:	81 ee       	ldi	r24, 0xE1	; 225
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	31 50       	subi	r19, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x58>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x62>
  d4:	00 00       	nop
		SET_BIT(PORTB,i);
		_delay_ms(200);
		}
			
		//Turn OFF all LEDS sequentially	
		for(i=7;i>=0;i--){
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	22 23       	and	r18, r18
  da:	44 f7       	brge	.-48     	; 0xac <main+0x3a>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	34 e3       	ldi	r19, 0x34	; 52
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x70>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x7a>
  ec:	00 00       	nop
  ee:	c3 cf       	rjmp	.-122    	; 0x76 <main+0x4>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
