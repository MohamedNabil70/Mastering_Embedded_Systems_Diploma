
Task2_LED_Button_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000637  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000285  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  0000141f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
}

void DIO_init(void){
	
	//Port B select all pins mode (OUTPUT)
	DDRB = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	
	//Port C Pin0 select (Input Floating)
	CLR_BIT(DDRC,0);
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	84 bb       	out	0x14, r24	; 20
  76:	08 95       	ret

00000078 <main>:
//main
int main(void)
{
    u8 state = 0;
	
	DIO_init();
  78:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>


//main
int main(void)
{
    u8 state = 0;
  7c:	80 e0       	ldi	r24, 0x00	; 0
	
	//PROGRAM INFINITE LOOP
	 while(1)
	 {
	
		if ( GET_BIT(PINC,0) == 1)
  7e:	98 9b       	sbis	0x13, 0	; 19
  80:	13 c0       	rjmp	.+38     	; 0xa8 <main+0x30>
		{
		
		
		if (state <= 7)
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	68 f4       	brcc	.+26     	; 0xa0 <main+0x28>
		{
			SET_BIT(PORTB,state);
  86:	98 b3       	in	r25, 0x18	; 24
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	08 2e       	mov	r0, r24
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x1c>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x18>
  98:	29 2b       	or	r18, r25
  9a:	28 bb       	out	0x18, r18	; 24
			state++;
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x2c>
		} 
		else
		{
			//Reset all LEDS
			PORTB = 0;
  a0:	18 ba       	out	0x18, r1	; 24
			//Reset state
			state = 0;
  a2:	80 e0       	ldi	r24, 0x00	; 0
		}
		
		//Trap processor until button is unpressed
		while( GET_BIT(PINC,0) == 1 );
  a4:	98 99       	sbic	0x13, 0	; 19
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	30 e7       	ldi	r19, 0x70	; 112
  ac:	92 e0       	ldi	r25, 0x02	; 2
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x36>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x40>
  b8:	00 00       	nop
  ba:	e1 cf       	rjmp	.-62     	; 0x7e <main+0x6>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
